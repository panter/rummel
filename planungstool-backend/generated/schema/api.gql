# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AcceptSearchRequestInterestInput {
  buildingComponent: AssignBuildingComponentInput!
  interestId: String!
}

type AppAsset {
  confirmedAt: DateTime
  createdAt: DateTime!
  id: ID!
  mimeType: String!
  originalFilename: String!
  size: BigInt!
  tags: [String!]
  updatedAt: DateTime!
  url: String
}

input AppAssetCreateNestedOneWithoutBuildingComponentAssetReferenceInput {
  connect: ConnectRelationInput
}

input AppAssetCreateNestedOneWithoutBuildingComponentInput {
  connect: ConnectRelationInput
}

input AppAssetCreateNestedOneWithoutMaterialsDepotAssetReferenceInput {
  connect: ConnectRelationInput
}

input AppAssetCreateNestedOneWithoutMaterialsDepotInput {
  connect: ConnectRelationInput
}

input AppAssetCreateNestedOneWithoutProjectAssetReferenceInput {
  connect: ConnectRelationInput
}

input AppAssetCreateNestedOneWithoutProjectInput {
  connect: ConnectRelationInput
}

input AppAssetCreateNestedOneWithoutSearchRequestAssetReferenceInput {
  connect: ConnectRelationInput
}

input AppAssetCreateNestedOneWithoutStorageLocationAssetReferenceInput {
  connect: ConnectRelationInput
}

input AppAssetCreateNestedOneWithoutStorageLocationInput {
  connect: ConnectRelationInput
}

input AppAssetOneRelationFilter {
  AND: AppAssetWhereInput
  NOT: AppAssetWhereInput
  OR: AppAssetWhereInput
  confirmedAt: DateTimeFilter
  createdAt: DateTimeFilter
  id: StringFilter
  mimeType: StringFilter
  originalFilename: StringFilter
  size: IntFilter
  tags: StringFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input AppAssetOrderByInput {
  confirmedAt: SortOrder
  createdAt: SortOrder
  id: SortOrder
  mimeType: SortOrder
  originalFilename: SortOrder
  size: SortOrder
  tags: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input AppAssetUpdateNestedOneWithoutBuildingComponentAssetReferenceInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input AppAssetUpdateNestedOneWithoutBuildingComponentInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input AppAssetUpdateNestedOneWithoutMaterialsDepotAssetReferenceInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input AppAssetUpdateNestedOneWithoutMaterialsDepotInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input AppAssetUpdateNestedOneWithoutProjectAssetReferenceInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input AppAssetUpdateNestedOneWithoutProjectInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input AppAssetUpdateNestedOneWithoutSearchRequestAssetReferenceInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input AppAssetUpdateNestedOneWithoutStorageLocationAssetReferenceInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input AppAssetUpdateNestedOneWithoutStorageLocationInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input AppAssetWhereInput {
  AND: [AppAssetWhereInput!]
  NOT: [AppAssetWhereInput!]
  OR: [AppAssetWhereInput!]
  confirmedAt: DateTimeFilter
  createdAt: DateTimeFilter
  id: StringFilter
  mimeType: StringFilter
  originalFilename: StringFilter
  size: IntFilter
  tags: StringFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input AssignBuildingComponentInput {
  amount: Int!
  amountReserved: Int
  buildingComponentId: String!
}

type AssignedBuildingComponent {
  amount: Int!
  amountReserved: Int!
  buildingComponent: BuildingComponent!
  createdAt: DateTime!
  id: ID!
  searchRequest: SearchRequest!
  updatedAt: DateTime!
}

input AssignedBuildingComponentCreateNestedManyWithoutSearchRequestInput {
  connect: [ConnectRelationInput!]
  disconnect: [EntityIdInput!]
}

input AssignedBuildingComponentCreateNestedOneWithoutBuildingComponentInput {
  connect: ConnectRelationInput
}

input AssignedBuildingComponentOneRelationFilter {
  AND: AssignedBuildingComponentWhereInput
  NOT: AssignedBuildingComponentWhereInput
  OR: AssignedBuildingComponentWhereInput
  amount: IntFilter
  amountReserved: IntFilter
  buildingComponent: BuildingComponentOneRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  searchRequest: SearchRequestOneRelationFilter
  updatedAt: DateTimeFilter
}

input AssignedBuildingComponentOrderByInput {
  amount: SortOrder
  amountReserved: SortOrder
  buildingComponent: BuildingComponentOrderByInput
  createdAt: SortOrder
  id: SortOrder
  searchRequest: SearchRequestOrderByInput
  updatedAt: SortOrder
}

input AssignedBuildingComponentUpdateNestedOneWithoutBuildingComponentInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input AssignedBuildingComponentWhereInput {
  AND: [AssignedBuildingComponentWhereInput!]
  NOT: [AssignedBuildingComponentWhereInput!]
  OR: [AssignedBuildingComponentWhereInput!]
  amount: IntFilter
  amountReserved: IntFilter
  buildingComponent: BuildingComponentOneRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  searchRequest: SearchRequestOneRelationFilter
  updatedAt: DateTimeFilter
}

type Autocomplete {
  id: ID!
  key: String!
  value: String!
}

input AutocompleteCreateInput {
  key: String
  value: String
}

input AutocompleteOrderByInput {
  id: SortOrder
  key: SortOrder
  value: SortOrder
}

input AutocompleteUpdateInput {
  key: StringInput
  value: StringInput
}

input AutocompleteWhereInput {
  AND: [AutocompleteWhereInput!]
  NOT: [AutocompleteWhereInput!]
  OR: [AutocompleteWhereInput!]
  id: StringFilter
  key: StringFilter
  value: StringFilter
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input BoolFilter {
  equals: Boolean
}

input BooleanInput {
  set: Boolean
}

type BuildingComponent {
  assets: [BuildingComponentAssetReference!]
  assignedTo: AssignedBuildingComponent
  category: Category
  categoryId: ReferenceId
  co2QuantityUsed: Float
  co2Savings: Float
  co2SavingsExact: Boolean
  co2SavingsPerUnit: Float
  co2SavingsTotal: Float
  co2Unit: QuantityUnit
  componentId: String
  componentSn: BigInt!
  condition: Condition
  constructionYear: Float
  constructionYearExact: Boolean
  constructionYearNotes: String
  contacts: [Contact!]
  createdAt: DateTime!
  demolitionPhase: String
  description: String
  dimensions: [Dimension!]
  dimensionsNotes: String
  ebkphCategory: EbkphCategory
  ebkphCategoryId: ReferenceId
  fallbackLevel: String
  fallbackLevelCO2PerUnit: Float
  fallbackLevelCO2Total: Float
  harmfulSubstances: HarmfulSubstances
  id: ID!
  locationInBuilding: String
  locationInBuildingDetail: String
  mainImage: AppAsset
  mainImageId: AppAsset
  materialsDepot: MaterialsDepot!
  materialsDepotId: ReferenceId
  name: String
  phase: BuildingComponentPhase!
  potentialInterests: String
  quantity: Float
  quantityExact: Boolean
  quantityNotes: String
  quantitySpare: Float
  quantityUnit: QuantityUnit
  reusePotential: ReusePotential
  reusePotentialConclusion: String
  reusePotentialNotes: String
  reuseValueDescription: String
  reuseValuePerUnit: Float
  reuseValueTotal: Float
  ru1Explanation: String
  ru1PerUnit: Float
  ru1Total: Float
  ru2Explanation: String
  ru2PerUnit: Float
  ru2Total: Float
  ru3Explanation: String
  ru3PerUnit: Float
  ru3Total: Float
  ruPerUnitSum: Float
  ruTotalSum: Float
  searchRequestInterests: [SearchRequestInterest!]!
  showInMatching: Boolean!
  sparePartsNotes: String
  state: BuildingComponentState!
  storageLocation: StorageLocation
  storageLocationId: ReferenceId
  storageLocationNotes: String
  transportDistanceInKm: Float
  transportVehicleName: String
  updatedAt: DateTime!
  warrantyDetails: String
}

type BuildingComponentAssetReference {
  asset: AppAsset!
  createdAt: DateTime!
  id: ID!
  tags: [String!]
  updatedAt: DateTime!
}

input BuildingComponentAssetReferenceCreateNestedManyWithoutBuildingComponentInput {
  connect: [ConnectRelationInput!]
  create: [BuildingComponentAssetReferenceCreateWithoutBuildingComponentInput!]
  disconnect: [EntityIdInput!]
  update: [BuildingComponentAssetReferenceUpdateWithWhereUniqueWithoutBuildingComponentInput!]
}

input BuildingComponentAssetReferenceCreateWithoutBuildingComponentInput {
  asset: AppAssetCreateNestedOneWithoutBuildingComponentAssetReferenceInput
  tags: [String!]
}

input BuildingComponentAssetReferenceOrderByInput {
  asset: AppAssetOrderByInput
  createdAt: SortOrder
  id: SortOrder
  tags: SortOrder
  updatedAt: SortOrder
}

input BuildingComponentAssetReferenceUpdateInput {
  asset: AppAssetUpdateNestedOneWithoutBuildingComponentAssetReferenceInput
  tags: StringArrayInput
}

input BuildingComponentAssetReferenceUpdateWithWhereUniqueWithoutBuildingComponentInput {
  data: BuildingComponentAssetReferenceUpdateInput
  where: EntityIdInput!
}

input BuildingComponentAssetReferenceWhereInput {
  AND: [BuildingComponentAssetReferenceWhereInput!]
  NOT: [BuildingComponentAssetReferenceWhereInput!]
  OR: [BuildingComponentAssetReferenceWhereInput!]
  asset: AppAssetOneRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  tags: StringFilter
  updatedAt: DateTimeFilter
}

input BuildingComponentCreateInput {
  assets: BuildingComponentAssetReferenceCreateNestedManyWithoutBuildingComponentInput
  assignedTo: AssignedBuildingComponentCreateNestedOneWithoutBuildingComponentInput
  category: CategoryCreateNestedOneWithoutBuildingComponentInput
  co2QuantityUsed: Float
  co2Savings: Float
  co2SavingsExact: Boolean
  co2SavingsPerUnit: Float
  co2SavingsTotal: Float
  co2Unit: QuantityUnit
  condition: Condition
  constructionYear: Float
  constructionYearExact: Boolean
  constructionYearNotes: String
  contacts: ContactCreateNestedManyWithoutBuildingComponentInput
  demolitionPhase: String
  description: String
  dimensions: DimensionCreateNestedManyWithoutBuildingComponentInput
  dimensionsNotes: String
  ebkphCategory: EbkphCategoryCreateNestedOneWithoutBuildingComponentInput
  fallbackLevel: String
  fallbackLevelCO2PerUnit: Float
  fallbackLevelCO2Total: Float
  harmfulSubstances: HarmfulSubstances
  locationInBuilding: String
  locationInBuildingDetail: String
  mainImage: AppAssetCreateNestedOneWithoutBuildingComponentInput
  materialsDepot: MaterialsDepotCreateNestedOneWithoutBuildingComponentInput
  name: String
  phase: BuildingComponentPhase
  potentialInterests: String
  quantity: Float
  quantityExact: Boolean
  quantityNotes: String
  quantitySpare: Float
  quantityUnit: QuantityUnit
  reusePotential: ReusePotential
  reusePotentialConclusion: String
  reusePotentialNotes: String
  reuseValueDescription: String
  reuseValuePerUnit: Float
  reuseValueTotal: Float
  ru1Explanation: String
  ru1PerUnit: Float
  ru1Total: Float
  ru2Explanation: String
  ru2PerUnit: Float
  ru2Total: Float
  ru3Explanation: String
  ru3PerUnit: Float
  ru3Total: Float
  ruPerUnitSum: Float
  ruTotalSum: Float
  searchRequestInterests: SearchRequestInterestCreateNestedManyWithoutBuildingComponentInput
  showInMatching: Boolean
  sparePartsNotes: String
  state: BuildingComponentState
  storageLocation: StorageLocationCreateNestedOneWithoutBuildingComponentInput
  storageLocationNotes: String
  transportDistanceInKm: Float
  transportVehicleName: String
  warrantyDetails: String
}

input BuildingComponentCreateNestedManyWithoutMaterialsDepotInput {
  connect: [ConnectRelationInput!]
  create: [BuildingComponentCreateWithoutMaterialsDepotInput!]
  disconnect: [EntityIdInput!]
  update: [BuildingComponentUpdateWithWhereUniqueWithoutMaterialsDepotInput!]
}

input BuildingComponentCreateNestedManyWithoutStorageLocationInput {
  connect: [ConnectRelationInput!]
  disconnect: [EntityIdInput!]
}

input BuildingComponentCreateNestedOneWithoutSearchRequestInterestInput {
  connect: ConnectRelationInput
}

input BuildingComponentCreateWithoutMaterialsDepotInput {
  assets: BuildingComponentAssetReferenceCreateNestedManyWithoutBuildingComponentInput
  assignedTo: AssignedBuildingComponentCreateNestedOneWithoutBuildingComponentInput
  category: CategoryCreateNestedOneWithoutBuildingComponentInput
  co2QuantityUsed: Float
  co2Savings: Float
  co2SavingsExact: Boolean
  co2SavingsPerUnit: Float
  co2SavingsTotal: Float
  co2Unit: QuantityUnit
  condition: Condition
  constructionYear: Float
  constructionYearExact: Boolean
  constructionYearNotes: String
  contacts: ContactCreateNestedManyWithoutBuildingComponentInput
  demolitionPhase: String
  description: String
  dimensions: DimensionCreateNestedManyWithoutBuildingComponentInput
  dimensionsNotes: String
  ebkphCategory: EbkphCategoryCreateNestedOneWithoutBuildingComponentInput
  fallbackLevel: String
  fallbackLevelCO2PerUnit: Float
  fallbackLevelCO2Total: Float
  harmfulSubstances: HarmfulSubstances
  locationInBuilding: String
  locationInBuildingDetail: String
  mainImage: AppAssetCreateNestedOneWithoutBuildingComponentInput
  name: String
  phase: BuildingComponentPhase
  potentialInterests: String
  quantity: Float
  quantityExact: Boolean
  quantityNotes: String
  quantitySpare: Float
  quantityUnit: QuantityUnit
  reusePotential: ReusePotential
  reusePotentialConclusion: String
  reusePotentialNotes: String
  reuseValueDescription: String
  reuseValuePerUnit: Float
  reuseValueTotal: Float
  ru1Explanation: String
  ru1PerUnit: Float
  ru1Total: Float
  ru2Explanation: String
  ru2PerUnit: Float
  ru2Total: Float
  ru3Explanation: String
  ru3PerUnit: Float
  ru3Total: Float
  ruPerUnitSum: Float
  ruTotalSum: Float
  searchRequestInterests: SearchRequestInterestCreateNestedManyWithoutBuildingComponentInput
  showInMatching: Boolean
  sparePartsNotes: String
  state: BuildingComponentState
  storageLocation: StorageLocationCreateNestedOneWithoutBuildingComponentInput
  storageLocationNotes: String
  transportDistanceInKm: Float
  transportVehicleName: String
  warrantyDetails: String
}

input BuildingComponentOneRelationFilter {
  AND: BuildingComponentWhereInput
  NOT: BuildingComponentWhereInput
  OR: BuildingComponentWhereInput
  assets: BuildingComponentAssetReferenceWhereInput
  category: CategoryOneRelationFilter
  co2QuantityUsed: IntFilter
  co2Savings: IntFilter
  co2SavingsExact: BoolFilter
  co2SavingsPerUnit: IntFilter
  co2SavingsTotal: IntFilter
  co2Unit: StringFilter
  componentId: StringFilter
  componentSn: IntFilter
  condition: StringFilter
  constructionYear: IntFilter
  constructionYearExact: BoolFilter
  constructionYearNotes: StringFilter
  createdAt: DateTimeFilter
  demolitionPhase: StringFilter
  description: StringFilter
  dimensions: DimensionWhereInput
  dimensionsNotes: StringFilter
  ebkphCategory: EbkphCategoryOneRelationFilter
  fallbackLevel: StringFilter
  fallbackLevelCO2PerUnit: IntFilter
  fallbackLevelCO2Total: IntFilter
  harmfulSubstances: StringFilter
  id: StringFilter
  locationInBuilding: StringFilter
  locationInBuildingDetail: StringFilter
  mainImage: AppAssetOneRelationFilter
  materialsDepot: MaterialsDepotOneRelationFilter
  name: StringFilter
  phase: StringFilter
  potentialInterests: StringFilter
  quantity: IntFilter
  quantityExact: BoolFilter
  quantityNotes: StringFilter
  quantitySpare: IntFilter
  quantityUnit: StringFilter
  reusePotential: StringFilter
  reusePotentialConclusion: StringFilter
  reusePotentialNotes: StringFilter
  reuseValueDescription: StringFilter
  reuseValuePerUnit: IntFilter
  reuseValueTotal: IntFilter
  ru1Explanation: StringFilter
  ru1PerUnit: IntFilter
  ru1Total: IntFilter
  ru2Explanation: StringFilter
  ru2PerUnit: IntFilter
  ru2Total: IntFilter
  ru3Explanation: StringFilter
  ru3PerUnit: IntFilter
  ru3Total: IntFilter
  ruPerUnitSum: IntFilter
  ruTotalSum: IntFilter
  showInMatching: BoolFilter
  sparePartsNotes: StringFilter
  state: StringFilter
  storageLocation: StorageLocationOneRelationFilter
  storageLocationNotes: StringFilter
  transportDistanceInKm: IntFilter
  transportVehicleName: StringFilter
  updatedAt: DateTimeFilter
  warrantyDetails: StringFilter
}

input BuildingComponentOrderByInput {
  assets: BuildingComponentAssetReferenceOrderByInput
  assignedTo: AssignedBuildingComponentOrderByInput
  category: CategoryOrderByInput
  co2QuantityUsed: SortOrder
  co2Savings: SortOrder
  co2SavingsExact: SortOrder
  co2SavingsPerUnit: SortOrder
  co2SavingsTotal: SortOrder
  co2Unit: SortOrder
  componentId: SortOrder
  componentSn: SortOrder
  condition: SortOrder
  constructionYear: SortOrder
  constructionYearExact: SortOrder
  constructionYearNotes: SortOrder
  contacts: ContactOrderByInput
  createdAt: SortOrder
  demolitionPhase: SortOrder
  description: SortOrder
  dimensions: DimensionOrderByInput
  dimensionsNotes: SortOrder
  ebkphCategory: EbkphCategoryOrderByInput
  fallbackLevel: SortOrder
  fallbackLevelCO2PerUnit: SortOrder
  fallbackLevelCO2Total: SortOrder
  harmfulSubstances: SortOrder
  id: SortOrder
  locationInBuilding: SortOrder
  locationInBuildingDetail: SortOrder
  mainImage: AppAssetOrderByInput
  materialsDepot: MaterialsDepotOrderByInput
  name: SortOrder
  phase: SortOrder
  potentialInterests: SortOrder
  quantity: SortOrder
  quantityExact: SortOrder
  quantityNotes: SortOrder
  quantitySpare: SortOrder
  quantityUnit: SortOrder
  reusePotential: SortOrder
  reusePotentialConclusion: SortOrder
  reusePotentialNotes: SortOrder
  reuseValueDescription: SortOrder
  reuseValuePerUnit: SortOrder
  reuseValueTotal: SortOrder
  ru1Explanation: SortOrder
  ru1PerUnit: SortOrder
  ru1Total: SortOrder
  ru2Explanation: SortOrder
  ru2PerUnit: SortOrder
  ru2Total: SortOrder
  ru3Explanation: SortOrder
  ru3PerUnit: SortOrder
  ru3Total: SortOrder
  ruPerUnitSum: SortOrder
  ruTotalSum: SortOrder
  searchRequestInterests: SearchRequestInterestOrderByInput
  showInMatching: SortOrder
  sparePartsNotes: SortOrder
  state: SortOrder
  storageLocation: StorageLocationOrderByInput
  storageLocationNotes: SortOrder
  transportDistanceInKm: SortOrder
  transportVehicleName: SortOrder
  updatedAt: SortOrder
  warrantyDetails: SortOrder
}

enum BuildingComponentPhase {
  clarification
  disassembly
  inventory
  meditation
  release
  reused
  stored
}

input BuildingComponentPhaseEnumInput {
  set: BuildingComponentPhase
}

enum BuildingComponentState {
  active
  closed
  draft
}

input BuildingComponentStateEnumInput {
  set: BuildingComponentState
}

input BuildingComponentUpdateInput {
  assets: BuildingComponentAssetReferenceCreateNestedManyWithoutBuildingComponentInput
  assignedTo: AssignedBuildingComponentUpdateNestedOneWithoutBuildingComponentInput
  category: CategoryUpdateNestedOneWithoutBuildingComponentInput
  co2QuantityUsed: NumberInput
  co2Savings: NumberInput
  co2SavingsExact: BooleanInput
  co2SavingsPerUnit: NumberInput
  co2SavingsTotal: NumberInput
  co2Unit: QuantityUnitEnumInput
  condition: ConditionEnumInput
  constructionYear: NumberInput
  constructionYearExact: BooleanInput
  constructionYearNotes: StringInput
  contacts: ContactCreateNestedManyWithoutBuildingComponentInput
  demolitionPhase: StringInput
  description: StringInput
  dimensions: DimensionCreateNestedManyWithoutBuildingComponentInput
  dimensionsNotes: StringInput
  ebkphCategory: EbkphCategoryUpdateNestedOneWithoutBuildingComponentInput
  fallbackLevel: StringInput
  fallbackLevelCO2PerUnit: NumberInput
  fallbackLevelCO2Total: NumberInput
  harmfulSubstances: HarmfulSubstancesEnumInput
  locationInBuilding: StringInput
  locationInBuildingDetail: StringInput
  mainImage: AppAssetUpdateNestedOneWithoutBuildingComponentInput
  materialsDepot: MaterialsDepotUpdateNestedOneWithoutBuildingComponentInput
  name: StringInput
  phase: BuildingComponentPhaseEnumInput
  potentialInterests: StringInput
  quantity: NumberInput
  quantityExact: BooleanInput
  quantityNotes: StringInput
  quantitySpare: NumberInput
  quantityUnit: QuantityUnitEnumInput
  reusePotential: ReusePotentialEnumInput
  reusePotentialConclusion: StringInput
  reusePotentialNotes: StringInput
  reuseValueDescription: StringInput
  reuseValuePerUnit: NumberInput
  reuseValueTotal: NumberInput
  ru1Explanation: StringInput
  ru1PerUnit: NumberInput
  ru1Total: NumberInput
  ru2Explanation: StringInput
  ru2PerUnit: NumberInput
  ru2Total: NumberInput
  ru3Explanation: StringInput
  ru3PerUnit: NumberInput
  ru3Total: NumberInput
  ruPerUnitSum: NumberInput
  ruTotalSum: NumberInput
  searchRequestInterests: SearchRequestInterestCreateNestedManyWithoutBuildingComponentInput
  showInMatching: BooleanInput
  sparePartsNotes: StringInput
  state: BuildingComponentStateEnumInput
  storageLocation: StorageLocationUpdateNestedOneWithoutBuildingComponentInput
  storageLocationNotes: StringInput
  transportDistanceInKm: NumberInput
  transportVehicleName: StringInput
  warrantyDetails: StringInput
}

input BuildingComponentUpdateNestedOneWithoutSearchRequestInterestInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input BuildingComponentUpdateWithWhereUniqueWithoutMaterialsDepotInput {
  data: BuildingComponentUpdateInput
  where: EntityIdInput!
}

input BuildingComponentWhereInput {
  AND: [BuildingComponentWhereInput!]
  NOT: [BuildingComponentWhereInput!]
  OR: [BuildingComponentWhereInput!]
  assets: BuildingComponentAssetReferenceWhereInput
  assignedTo: AssignedBuildingComponentOneRelationFilter
  category: CategoryOneRelationFilter
  co2QuantityUsed: IntFilter
  co2Savings: IntFilter
  co2SavingsExact: BoolFilter
  co2SavingsPerUnit: IntFilter
  co2SavingsTotal: IntFilter
  co2Unit: StringFilter
  componentId: StringFilter
  componentSn: IntFilter
  condition: StringFilter
  constructionYear: IntFilter
  constructionYearExact: BoolFilter
  constructionYearNotes: StringFilter
  contacts: ContactWhereInput
  createdAt: DateTimeFilter
  demolitionPhase: StringFilter
  description: StringFilter
  dimensions: DimensionWhereInput
  dimensionsNotes: StringFilter
  ebkphCategory: EbkphCategoryOneRelationFilter
  fallbackLevel: StringFilter
  fallbackLevelCO2PerUnit: IntFilter
  fallbackLevelCO2Total: IntFilter
  harmfulSubstances: StringFilter
  id: StringFilter
  locationInBuilding: StringFilter
  locationInBuildingDetail: StringFilter
  mainImage: AppAssetOneRelationFilter
  materialsDepot: MaterialsDepotOneRelationFilter
  name: StringFilter
  phase: StringFilter
  potentialInterests: StringFilter
  quantity: IntFilter
  quantityExact: BoolFilter
  quantityNotes: StringFilter
  quantitySpare: IntFilter
  quantityUnit: StringFilter
  reusePotential: StringFilter
  reusePotentialConclusion: StringFilter
  reusePotentialNotes: StringFilter
  reuseValueDescription: StringFilter
  reuseValuePerUnit: IntFilter
  reuseValueTotal: IntFilter
  ru1Explanation: StringFilter
  ru1PerUnit: IntFilter
  ru1Total: IntFilter
  ru2Explanation: StringFilter
  ru2PerUnit: IntFilter
  ru2Total: IntFilter
  ru3Explanation: StringFilter
  ru3PerUnit: IntFilter
  ru3Total: IntFilter
  ruPerUnitSum: IntFilter
  ruTotalSum: IntFilter
  searchRequestInterests: SearchRequestInterestWhereInput
  showInMatching: BoolFilter
  sparePartsNotes: StringFilter
  state: StringFilter
  storageLocation: StorageLocationOneRelationFilter
  storageLocationNotes: StringFilter
  transportDistanceInKm: IntFilter
  transportVehicleName: StringFilter
  updatedAt: DateTimeFilter
  warrantyDetails: StringFilter
}

type Canton {
  name: String!
}

input CantonByPostalCodeAndCityInput {
  postalCode: String!
}

input CantonOrderByInput {
  name: SortOrder
}

input CantonWhereInput {
  AND: [CantonWhereInput!]
  NOT: [CantonWhereInput!]
  OR: [CantonWhereInput!]
  name: StringFilter
}

type Category {
  description: String
  id: ID!
  name: String!
  parent: Category
  sortOrder: Float
}

input CategoryCreateInput {
  description: String
  name: String
  parent: CategoryCreateNestedOneWithoutCategoryInput
  sortOrder: Float
}

input CategoryCreateNestedOneWithoutBuildingComponentInput {
  connect: ConnectRelationInput
}

input CategoryCreateNestedOneWithoutCategoryInput {
  connect: ConnectRelationInput
}

input CategoryCreateNestedOneWithoutSearchRequestInput {
  connect: ConnectRelationInput
}

input CategoryOneRelationFilter {
  AND: CategoryWhereInput
  NOT: CategoryWhereInput
  OR: CategoryWhereInput
  description: StringFilter
  id: StringFilter
  name: StringFilter
  parent: CategoryOneRelationFilter
  sortOrder: IntFilter
}

input CategoryOrderByInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  parent: CategoryOrderByInput
  sortOrder: SortOrder
}

input CategoryUpdateInput {
  description: StringInput
  name: StringInput
  parent: CategoryUpdateNestedOneWithoutCategoryInput
  sortOrder: NumberInput
}

input CategoryUpdateNestedOneWithoutBuildingComponentInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input CategoryUpdateNestedOneWithoutCategoryInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input CategoryUpdateNestedOneWithoutSearchRequestInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  description: StringFilter
  id: StringFilter
  name: StringFilter
  parent: CategoryOneRelationFilter
  sortOrder: IntFilter
}

enum Condition {
  bad
  fair
  good
  unknown
}

input ConditionEnumInput {
  set: Condition
}

input ConnectRelationInput {
  id: String!
}

type Contact {
  canton: String
  city: String
  contact1: String
  contact2: String
  country: String
  createdAt: DateTime!
  firstLine: String
  firstName: String
  id: ID!
  lastName: String
  notes: String
  postalCode: String
  street: String
  type: String
  updatedAt: DateTime!
}

input ContactCreateNestedManyWithoutBuildingComponentInput {
  connect: [ConnectRelationInput!]
  create: [ContactCreateWithoutBuildingComponentInput!]
  disconnect: [EntityIdInput!]
  update: [ContactUpdateWithWhereUniqueWithoutBuildingComponentInput!]
}

input ContactCreateNestedManyWithoutMaterialsDepotInput {
  connect: [ConnectRelationInput!]
  create: [ContactCreateWithoutMaterialsDepotInput!]
  disconnect: [EntityIdInput!]
  update: [ContactUpdateWithWhereUniqueWithoutMaterialsDepotInput!]
}

input ContactCreateNestedManyWithoutProjectInput {
  connect: [ConnectRelationInput!]
  create: [ContactCreateWithoutProjectInput!]
  disconnect: [EntityIdInput!]
  update: [ContactUpdateWithWhereUniqueWithoutProjectInput!]
}

input ContactCreateNestedManyWithoutStorageLocationInput {
  connect: [ConnectRelationInput!]
  create: [ContactCreateWithoutStorageLocationInput!]
  disconnect: [EntityIdInput!]
  update: [ContactUpdateWithWhereUniqueWithoutStorageLocationInput!]
}

input ContactCreateWithoutBuildingComponentInput {
  city: String
  contact1: String
  contact2: String
  country: String = "CH"
  firstLine: String
  firstName: String
  lastName: String
  notes: String
  postalCode: String
  street: String
  type: String
}

input ContactCreateWithoutMaterialsDepotInput {
  city: String
  contact1: String
  contact2: String
  country: String = "CH"
  firstLine: String
  firstName: String
  lastName: String
  notes: String
  postalCode: String
  street: String
  type: String
}

input ContactCreateWithoutProjectInput {
  city: String
  contact1: String
  contact2: String
  country: String = "CH"
  firstLine: String
  firstName: String
  lastName: String
  notes: String
  postalCode: String
  street: String
  type: String
}

input ContactCreateWithoutStorageLocationInput {
  city: String
  contact1: String
  contact2: String
  country: String = "CH"
  firstLine: String
  firstName: String
  lastName: String
  notes: String
  postalCode: String
  street: String
  type: String
}

input ContactOrderByInput {
  canton: SortOrder
  city: SortOrder
  contact1: SortOrder
  contact2: SortOrder
  country: SortOrder
  createdAt: SortOrder
  firstLine: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  notes: SortOrder
  postalCode: SortOrder
  street: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input ContactUpdateInput {
  city: StringInput
  contact1: StringInput
  contact2: StringInput
  country: StringInput
  firstLine: StringInput
  firstName: StringInput
  lastName: StringInput
  notes: StringInput
  postalCode: StringInput
  street: StringInput
  type: StringInput
}

input ContactUpdateWithWhereUniqueWithoutBuildingComponentInput {
  data: ContactUpdateInput
  where: EntityIdInput!
}

input ContactUpdateWithWhereUniqueWithoutMaterialsDepotInput {
  data: ContactUpdateInput
  where: EntityIdInput!
}

input ContactUpdateWithWhereUniqueWithoutProjectInput {
  data: ContactUpdateInput
  where: EntityIdInput!
}

input ContactUpdateWithWhereUniqueWithoutStorageLocationInput {
  data: ContactUpdateInput
  where: EntityIdInput!
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  canton: StringFilter
  city: StringFilter
  contact1: StringFilter
  contact2: StringFilter
  country: StringFilter
  createdAt: DateTimeFilter
  firstLine: StringFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  notes: StringFilter
  postalCode: StringFilter
  street: StringFilter
  type: StringFilter
  updatedAt: DateTimeFilter
}

input DateInput {
  set: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
}

type Dimension {
  createdAt: DateTime!
  depth: Float
  height: Float
  id: ID!
  isExact: Boolean
  type: String
  unit: String
  updatedAt: DateTime!
  width: Float
}

input DimensionCreateNestedManyWithoutBuildingComponentInput {
  connect: [ConnectRelationInput!]
  create: [DimensionCreateWithoutBuildingComponentInput!]
  disconnect: [EntityIdInput!]
  update: [DimensionUpdateWithWhereUniqueWithoutBuildingComponentInput!]
}

input DimensionCreateWithoutBuildingComponentInput {
  depth: Float
  height: Float
  isExact: Boolean
  type: String
  width: Float
}

input DimensionOrderByInput {
  createdAt: SortOrder
  depth: SortOrder
  height: SortOrder
  id: SortOrder
  isExact: SortOrder
  type: SortOrder
  unit: SortOrder
  updatedAt: SortOrder
  width: SortOrder
}

type DimensionRange {
  createdAt: DateTime!
  id: ID!
  maxDepth: Float
  maxHeight: Float
  maxWidth: Float
  minDepth: Float
  minHeight: Float
  minWidth: Float
  type: String
  unit: String!
  updatedAt: DateTime!
}

input DimensionRangeCreateNestedManyWithoutSearchRequestInput {
  connect: [ConnectRelationInput!]
  create: [DimensionRangeCreateWithoutSearchRequestInput!]
  disconnect: [EntityIdInput!]
  update: [DimensionRangeUpdateWithWhereUniqueWithoutSearchRequestInput!]
}

input DimensionRangeCreateWithoutSearchRequestInput {
  maxDepth: Float
  maxHeight: Float
  maxWidth: Float
  minDepth: Float
  minHeight: Float
  minWidth: Float
  type: String
}

input DimensionRangeOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  maxDepth: SortOrder
  maxHeight: SortOrder
  maxWidth: SortOrder
  minDepth: SortOrder
  minHeight: SortOrder
  minWidth: SortOrder
  type: SortOrder
  unit: SortOrder
  updatedAt: SortOrder
}

input DimensionRangeUpdateInput {
  maxDepth: NumberInput
  maxHeight: NumberInput
  maxWidth: NumberInput
  minDepth: NumberInput
  minHeight: NumberInput
  minWidth: NumberInput
  type: StringInput
}

input DimensionRangeUpdateWithWhereUniqueWithoutSearchRequestInput {
  data: DimensionRangeUpdateInput
  where: EntityIdInput!
}

input DimensionRangeWhereInput {
  AND: [DimensionRangeWhereInput!]
  NOT: [DimensionRangeWhereInput!]
  OR: [DimensionRangeWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  maxDepth: IntFilter
  maxHeight: IntFilter
  maxWidth: IntFilter
  minDepth: IntFilter
  minHeight: IntFilter
  minWidth: IntFilter
  type: StringFilter
  updatedAt: DateTimeFilter
}

input DimensionUpdateInput {
  depth: NumberInput
  height: NumberInput
  isExact: BooleanInput
  type: StringInput
  width: NumberInput
}

input DimensionUpdateWithWhereUniqueWithoutBuildingComponentInput {
  data: DimensionUpdateInput
  where: EntityIdInput!
}

input DimensionWhereInput {
  AND: [DimensionWhereInput!]
  NOT: [DimensionWhereInput!]
  OR: [DimensionWhereInput!]
  createdAt: DateTimeFilter
  depth: IntFilter
  height: IntFilter
  id: StringFilter
  isExact: BoolFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  width: IntFilter
}

type EbkphCategory {
  description: String
  id: ID!
  name: String!
  parent: EbkphCategory
  parentId: EbkphCategory
}

input EbkphCategoryCreateInput {
  description: String
  name: String
  parent: EbkphCategoryCreateNestedOneWithoutEbkphCategoryInput
}

input EbkphCategoryCreateNestedOneWithoutBuildingComponentInput {
  connect: ConnectRelationInput
}

input EbkphCategoryCreateNestedOneWithoutEbkphCategoryInput {
  connect: ConnectRelationInput
}

input EbkphCategoryCreateNestedOneWithoutSearchRequestInput {
  connect: ConnectRelationInput
}

input EbkphCategoryOneRelationFilter {
  AND: EbkphCategoryWhereInput
  NOT: EbkphCategoryWhereInput
  OR: EbkphCategoryWhereInput
  description: StringFilter
  id: StringFilter
  name: StringFilter
  parent: EbkphCategoryOneRelationFilter
}

input EbkphCategoryOrderByInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  parent: EbkphCategoryOrderByInput
}

input EbkphCategoryUpdateInput {
  description: StringInput
  name: StringInput
  parent: EbkphCategoryUpdateNestedOneWithoutEbkphCategoryInput
}

input EbkphCategoryUpdateNestedOneWithoutBuildingComponentInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input EbkphCategoryUpdateNestedOneWithoutEbkphCategoryInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input EbkphCategoryUpdateNestedOneWithoutSearchRequestInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input EbkphCategoryWhereInput {
  AND: [EbkphCategoryWhereInput!]
  NOT: [EbkphCategoryWhereInput!]
  OR: [EbkphCategoryWhereInput!]
  description: StringFilter
  id: StringFilter
  name: StringFilter
  parent: EbkphCategoryOneRelationFilter
}

input EntityIdInput {
  id: String!
}

input FinishOtpLoginInput {
  email: String!
  otp: String!
}

type FinishOtpLoginResponse {
  access_token: String!
  user: FinishOtpLoginUserResponse!
}

type FinishOtpLoginUserResponse {
  id: String!
}

enum HarmfulSubstances {
  noAssessment
  notToExpect
  pollutant
  suspectedPollutant
}

input HarmfulSubstancesEnumInput {
  set: HarmfulSubstances
}

input IntFilter {
  equals: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
}

type MaterialsDepot {
  assets: [MaterialsDepotAssetReference!]
  buildingComponents: [BuildingComponent!]!
  buildingComponentsIds: [ReferenceId!]
  canton: String
  city: String
  complex: String
  constructionYear: Float
  constructionYearExact: Boolean
  contacts: [Contact!]
  country: String
  createdAt: DateTime!
  googleMapsLink: String
  historyNotes: String
  id: ID!
  interventionDepth: String
  mainImage: AppAsset
  mainImageId: AppAsset
  materialDepotFulltextSearch: String
  name: String!
  notes: String
  phase: String
  postalCode: String
  reUseRating: Float
  responsableUser: User!
  responsableUserId: ReferenceId
  searchInterests: [String!]
  shortName: String!
  state: MaterialsDepotState!
  street: String
  tasks: [Task!]
  timelines: [MaterialsDepotTimeline!]!
  typology: String
  updatedAt: DateTime!
}

type MaterialsDepotAssetReference {
  asset: AppAsset!
  createdAt: DateTime!
  id: ID!
  tags: [String!]
  updatedAt: DateTime!
}

input MaterialsDepotAssetReferenceCreateNestedManyWithoutMaterialsDepotInput {
  connect: [ConnectRelationInput!]
  create: [MaterialsDepotAssetReferenceCreateWithoutMaterialsDepotInput!]
  disconnect: [EntityIdInput!]
  update: [MaterialsDepotAssetReferenceUpdateWithWhereUniqueWithoutMaterialsDepotInput!]
}

input MaterialsDepotAssetReferenceCreateWithoutMaterialsDepotInput {
  asset: AppAssetCreateNestedOneWithoutMaterialsDepotAssetReferenceInput
  tags: [String!]
}

input MaterialsDepotAssetReferenceOrderByInput {
  asset: AppAssetOrderByInput
  createdAt: SortOrder
  id: SortOrder
  tags: SortOrder
  updatedAt: SortOrder
}

input MaterialsDepotAssetReferenceUpdateInput {
  asset: AppAssetUpdateNestedOneWithoutMaterialsDepotAssetReferenceInput
  tags: StringArrayInput
}

input MaterialsDepotAssetReferenceUpdateWithWhereUniqueWithoutMaterialsDepotInput {
  data: MaterialsDepotAssetReferenceUpdateInput
  where: EntityIdInput!
}

input MaterialsDepotAssetReferenceWhereInput {
  AND: [MaterialsDepotAssetReferenceWhereInput!]
  NOT: [MaterialsDepotAssetReferenceWhereInput!]
  OR: [MaterialsDepotAssetReferenceWhereInput!]
  asset: AppAssetOneRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  tags: StringFilter
  updatedAt: DateTimeFilter
}

input MaterialsDepotCreateInput {
  assets: MaterialsDepotAssetReferenceCreateNestedManyWithoutMaterialsDepotInput
  buildingComponents: BuildingComponentCreateNestedManyWithoutMaterialsDepotInput
  city: String
  complex: String
  constructionYear: Float
  constructionYearExact: Boolean
  contacts: ContactCreateNestedManyWithoutMaterialsDepotInput
  country: String = "CH"
  googleMapsLink: String
  historyNotes: String
  interventionDepth: String
  mainImage: AppAssetCreateNestedOneWithoutMaterialsDepotInput
  name: String
  notes: String
  phase: String
  postalCode: String
  reUseRating: Float
  responsableUser: UserCreateNestedOneWithoutMaterialsDepotInput
  shortName: String
  state: MaterialsDepotState
  street: String
  tasks: TaskCreateNestedManyWithoutMaterialsDepotInput
  timelines: MaterialsDepotTimelineCreateNestedManyWithoutMaterialsDepotInput
  typology: String
}

input MaterialsDepotCreateNestedOneWithoutBuildingComponentInput {
  connect: ConnectRelationInput
}

input MaterialsDepotOneRelationFilter {
  AND: MaterialsDepotWhereInput
  NOT: MaterialsDepotWhereInput
  OR: MaterialsDepotWhereInput
  assets: MaterialsDepotAssetReferenceWhereInput
  buildingComponents: BuildingComponentWhereInput
  canton: StringFilter
  city: StringFilter
  complex: StringFilter
  constructionYear: IntFilter
  constructionYearExact: BoolFilter
  contacts: ContactWhereInput
  country: StringFilter
  createdAt: DateTimeFilter
  googleMapsLink: StringFilter
  historyNotes: StringFilter
  id: StringFilter
  interventionDepth: StringFilter
  mainImage: AppAssetOneRelationFilter
  materialDepotFulltextSearch: StringFilter
  name: StringFilter
  notes: StringFilter
  phase: StringFilter
  postalCode: StringFilter
  reUseRating: IntFilter
  responsableUser: UserOneRelationFilter
  shortName: StringFilter
  state: StringFilter
  street: StringFilter
  tasks: TaskWhereInput
  timelines: MaterialsDepotTimelineWhereInput
  typology: StringFilter
  updatedAt: DateTimeFilter
}

input MaterialsDepotOrderByInput {
  assets: MaterialsDepotAssetReferenceOrderByInput
  buildingComponents: BuildingComponentOrderByInput
  canton: SortOrder
  city: SortOrder
  complex: SortOrder
  constructionYear: SortOrder
  constructionYearExact: SortOrder
  contacts: ContactOrderByInput
  country: SortOrder
  createdAt: SortOrder
  googleMapsLink: SortOrder
  historyNotes: SortOrder
  id: SortOrder
  interventionDepth: SortOrder
  mainImage: AppAssetOrderByInput
  materialDepotFulltextSearch: SortOrder
  name: SortOrder
  notes: SortOrder
  phase: SortOrder
  postalCode: SortOrder
  reUseRating: SortOrder
  responsableUser: UserOrderByInput
  shortName: SortOrder
  state: SortOrder
  street: SortOrder
  tasks: TaskOrderByInput
  timelines: MaterialsDepotTimelineOrderByInput
  typology: SortOrder
  updatedAt: SortOrder
}

enum MaterialsDepotState {
  active
  closed
  draft
}

input MaterialsDepotStateEnumInput {
  set: MaterialsDepotState
}

type MaterialsDepotTimeline {
  createdAt: DateTime!
  description: String!
  endDate: DateTime
  id: ID!
  startDate: DateTime
  updatedAt: DateTime!
}

input MaterialsDepotTimelineCreateInput {
  description: String
  endDate: DateTime
  startDate: DateTime
}

input MaterialsDepotTimelineCreateNestedManyWithoutMaterialsDepotInput {
  connect: [ConnectRelationInput!]
  create: [MaterialsDepotTimelineCreateWithoutMaterialsDepotInput!]
  disconnect: [EntityIdInput!]
  update: [MaterialsDepotTimelineUpdateWithWhereUniqueWithoutMaterialsDepotInput!]
}

input MaterialsDepotTimelineCreateWithoutMaterialsDepotInput {
  description: String
  endDate: DateTime
  startDate: DateTime
}

input MaterialsDepotTimelineOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  endDate: SortOrder
  id: SortOrder
  startDate: SortOrder
  updatedAt: SortOrder
}

input MaterialsDepotTimelineUpdateInput {
  description: StringInput
  endDate: DateInput
  startDate: DateInput
}

input MaterialsDepotTimelineUpdateWithWhereUniqueWithoutMaterialsDepotInput {
  data: MaterialsDepotTimelineUpdateInput
  where: EntityIdInput!
}

input MaterialsDepotTimelineWhereInput {
  AND: [MaterialsDepotTimelineWhereInput!]
  NOT: [MaterialsDepotTimelineWhereInput!]
  OR: [MaterialsDepotTimelineWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  endDate: DateTimeFilter
  id: StringFilter
  startDate: DateTimeFilter
  updatedAt: DateTimeFilter
}

input MaterialsDepotUpdateInput {
  assets: MaterialsDepotAssetReferenceCreateNestedManyWithoutMaterialsDepotInput
  buildingComponents: BuildingComponentCreateNestedManyWithoutMaterialsDepotInput
  city: StringInput
  complex: StringInput
  constructionYear: NumberInput
  constructionYearExact: BooleanInput
  contacts: ContactCreateNestedManyWithoutMaterialsDepotInput
  country: StringInput
  googleMapsLink: StringInput
  historyNotes: StringInput
  interventionDepth: StringInput
  mainImage: AppAssetUpdateNestedOneWithoutMaterialsDepotInput
  name: StringInput
  notes: StringInput
  phase: StringInput
  postalCode: StringInput
  reUseRating: NumberInput
  responsableUser: UserUpdateNestedOneWithoutMaterialsDepotInput
  shortName: StringInput
  state: MaterialsDepotStateEnumInput
  street: StringInput
  tasks: TaskCreateNestedManyWithoutMaterialsDepotInput
  timelines: MaterialsDepotTimelineCreateNestedManyWithoutMaterialsDepotInput
  typology: StringInput
}

input MaterialsDepotUpdateNestedOneWithoutBuildingComponentInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input MaterialsDepotWhereInput {
  AND: [MaterialsDepotWhereInput!]
  NOT: [MaterialsDepotWhereInput!]
  OR: [MaterialsDepotWhereInput!]
  assets: MaterialsDepotAssetReferenceWhereInput
  buildingComponents: BuildingComponentWhereInput
  canton: StringFilter
  city: StringFilter
  complex: StringFilter
  constructionYear: IntFilter
  constructionYearExact: BoolFilter
  contacts: ContactWhereInput
  country: StringFilter
  createdAt: DateTimeFilter
  googleMapsLink: StringFilter
  historyNotes: StringFilter
  id: StringFilter
  interventionDepth: StringFilter
  mainImage: AppAssetOneRelationFilter
  materialDepotFulltextSearch: StringFilter
  name: StringFilter
  notes: StringFilter
  phase: StringFilter
  postalCode: StringFilter
  reUseRating: IntFilter
  responsableUser: UserOneRelationFilter
  shortName: StringFilter
  state: StringFilter
  street: StringFilter
  tasks: TaskWhereInput
  timelines: MaterialsDepotTimelineWhereInput
  typology: StringFilter
  updatedAt: DateTimeFilter
}

type Mutation {
  acceptSearchRequestInterest(input: AcceptSearchRequestInterestInput!): SearchRequestInterest!
  createOneAutocomplete(data: AutocompleteCreateInput): Autocomplete!
  createOneBuildingComponent(data: BuildingComponentCreateInput): BuildingComponent!
  createOneCategory(data: CategoryCreateInput): Category!
  createOneEbkphCategory(data: EbkphCategoryCreateInput): EbkphCategory!
  createOneMaterialsDepot(data: MaterialsDepotCreateInput): MaterialsDepot!
  createOneMaterialsDepotTimeline(data: MaterialsDepotTimelineCreateInput): MaterialsDepotTimeline!
  createOneProject(data: ProjectCreateInput): Project!
  createOneSearchRequest(data: SearchRequestCreateInput): SearchRequest!
  createOneSearchRequestInterest(data: SearchRequestInterestCreateInput): SearchRequestInterest!
  createOneStorageLocation(data: StorageLocationCreateInput): StorageLocation!
  createOneTask(data: TaskCreateInput): Task!
  deleteOneAutocomplete(where: EntityIdInput): Autocomplete!
  deleteOneBuildingComponent(where: EntityIdInput): BuildingComponent!
  deleteOneMaterialsDepot(where: EntityIdInput): MaterialsDepot!
  deleteOneSearchRequestInterest(where: EntityIdInput): SearchRequestInterest!
  finishOtpLogin(input: FinishOtpLoginInput!): FinishOtpLoginResponse!
  logout: User
  rejectSearchRequestInterest(input: RejectSearchRequestInterestInput!): SearchRequestInterest!
  triggerOtpLogin(input: TriggerOtpLoginInput!): Boolean!
  updateOneAutocomplete(data: AutocompleteUpdateInput, where: EntityIdInput!): Autocomplete!
  updateOneBuildingComponent(data: BuildingComponentUpdateInput, where: EntityIdInput!): BuildingComponent!
  updateOneCategory(data: CategoryUpdateInput, where: EntityIdInput!): Category!
  updateOneEbkphCategory(data: EbkphCategoryUpdateInput, where: EntityIdInput!): EbkphCategory!
  updateOneMaterialsDepot(data: MaterialsDepotUpdateInput, where: EntityIdInput!): MaterialsDepot!
  updateOneMaterialsDepotTimeline(data: MaterialsDepotTimelineUpdateInput, where: EntityIdInput!): MaterialsDepotTimeline!
  updateOneProject(data: ProjectUpdateInput, where: EntityIdInput!): Project!
  updateOneSearchRequest(data: SearchRequestUpdateInput, where: EntityIdInput!): SearchRequest!
  updateOneSearchRequestInterest(data: SearchRequestInterestUpdateInput, where: EntityIdInput!): SearchRequestInterest!
  updateOneStorageLocation(data: StorageLocationUpdateInput, where: EntityIdInput!): StorageLocation!
  updateOneTask(data: TaskUpdateInput, where: EntityIdInput!): Task!
}

input NumberInput {
  set: Float
}

type PostalCode {
  canton: String!
  description: String!
  postalCode: ID!
}

type Project {
  assets: [ProjectAssetReference!]
  city: String
  contacts: [Contact!]
  country: String
  createdAt: DateTime!
  id: ID!
  mainImage: AppAsset
  mainImageId: AppAsset
  name: String!
  notes: String
  phase: ProjectPhase!
  postalCode: String
  responsableUserPM: User!
  responsableUserSearch: User!
  shortName: String!
  somehowImportantContactWithoutName: Contact
  state: ProjectState!
  street: String
  type: String
  updatedAt: DateTime!
}

type ProjectAssetReference {
  asset: AppAsset!
  createdAt: DateTime!
  id: ID!
  tags: [String!]
  updatedAt: DateTime!
}

input ProjectAssetReferenceCreateNestedManyWithoutProjectInput {
  connect: [ConnectRelationInput!]
  create: [ProjectAssetReferenceCreateWithoutProjectInput!]
  disconnect: [EntityIdInput!]
  update: [ProjectAssetReferenceUpdateWithWhereUniqueWithoutProjectInput!]
}

input ProjectAssetReferenceCreateWithoutProjectInput {
  asset: AppAssetCreateNestedOneWithoutProjectAssetReferenceInput
  tags: [String!]
}

input ProjectAssetReferenceOrderByInput {
  asset: AppAssetOrderByInput
  createdAt: SortOrder
  id: SortOrder
  tags: SortOrder
  updatedAt: SortOrder
}

input ProjectAssetReferenceUpdateInput {
  asset: AppAssetUpdateNestedOneWithoutProjectAssetReferenceInput
  tags: StringArrayInput
}

input ProjectAssetReferenceUpdateWithWhereUniqueWithoutProjectInput {
  data: ProjectAssetReferenceUpdateInput
  where: EntityIdInput!
}

input ProjectAssetReferenceWhereInput {
  AND: [ProjectAssetReferenceWhereInput!]
  NOT: [ProjectAssetReferenceWhereInput!]
  OR: [ProjectAssetReferenceWhereInput!]
  asset: AppAssetOneRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  tags: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectCreateInput {
  assets: ProjectAssetReferenceCreateNestedManyWithoutProjectInput
  city: String
  contacts: ContactCreateNestedManyWithoutProjectInput
  country: String = "CH"
  mainImage: AppAssetCreateNestedOneWithoutProjectInput
  name: String
  notes: String
  phase: ProjectPhase
  postalCode: String
  responsableUserPM: UserCreateNestedOneWithoutProjectInput
  responsableUserSearch: UserCreateNestedOneWithoutProjectInput
  shortName: String
  state: ProjectState
  street: String
  type: String
}

input ProjectCreateNestedOneWithoutSearchRequestInput {
  connect: ConnectRelationInput
}

input ProjectOneRelationFilter {
  AND: ProjectWhereInput
  NOT: ProjectWhereInput
  OR: ProjectWhereInput
  assets: ProjectAssetReferenceWhereInput
  city: StringFilter
  contacts: ContactWhereInput
  country: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  mainImage: AppAssetOneRelationFilter
  name: StringFilter
  notes: StringFilter
  phase: StringFilter
  postalCode: StringFilter
  responsableUserPM: UserOneRelationFilter
  responsableUserSearch: UserOneRelationFilter
  shortName: StringFilter
  state: StringFilter
  street: StringFilter
  type: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectOrderByInput {
  assets: ProjectAssetReferenceOrderByInput
  city: SortOrder
  contacts: ContactOrderByInput
  country: SortOrder
  createdAt: SortOrder
  id: SortOrder
  mainImage: AppAssetOrderByInput
  name: SortOrder
  notes: SortOrder
  phase: SortOrder
  postalCode: SortOrder
  responsableUserPM: UserOrderByInput
  responsableUserSearch: UserOrderByInput
  shortName: SortOrder
  state: SortOrder
  street: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

enum ProjectPhase {
  empty
  phase0
  phase1
}

input ProjectPhaseEnumInput {
  set: ProjectPhase
}

enum ProjectState {
  active
  closed
  draft
}

input ProjectStateEnumInput {
  set: ProjectState
}

input ProjectUpdateInput {
  assets: ProjectAssetReferenceCreateNestedManyWithoutProjectInput
  city: StringInput
  contacts: ContactCreateNestedManyWithoutProjectInput
  country: StringInput
  mainImage: AppAssetUpdateNestedOneWithoutProjectInput
  name: StringInput
  notes: StringInput
  phase: ProjectPhaseEnumInput
  postalCode: StringInput
  responsableUserPM: UserUpdateNestedOneWithoutProjectInput
  responsableUserSearch: UserUpdateNestedOneWithoutProjectInput
  shortName: StringInput
  state: ProjectStateEnumInput
  street: StringInput
  type: StringInput
}

input ProjectUpdateNestedOneWithoutSearchRequestInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  assets: ProjectAssetReferenceWhereInput
  city: StringFilter
  contacts: ContactWhereInput
  country: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  mainImage: AppAssetOneRelationFilter
  name: StringFilter
  notes: StringFilter
  phase: StringFilter
  postalCode: StringFilter
  responsableUserPM: UserOneRelationFilter
  responsableUserSearch: UserOneRelationFilter
  shortName: StringFilter
  state: StringFilter
  street: StringFilter
  type: StringFilter
  updatedAt: DateTimeFilter
}

enum QuantityUnit {
  kg
  lfm
  m
  m2
  m3
  stk
}

input QuantityUnitEnumInput {
  set: QuantityUnit
}

type Query {
  allPostalCodes: [PostalCode!]!
  autocomplete(where: EntityIdInput): Autocomplete
  autocompletes(orderBy: [AutocompleteOrderByInput!], skip: Int, take: Int, where: AutocompleteWhereInput): [Autocomplete!]!
  autocompletesCount(orderBy: [AutocompleteOrderByInput!], skip: Int, take: Int, where: AutocompleteWhereInput): Int!
  buildingComponent(where: EntityIdInput): BuildingComponent
  buildingComponents(orderBy: [BuildingComponentOrderByInput!], skip: Int, take: Int, where: BuildingComponentWhereInput): [BuildingComponent!]!
  buildingComponentsCount(orderBy: [BuildingComponentOrderByInput!], skip: Int, take: Int, where: BuildingComponentWhereInput): Int!
  canton(where: EntityIdInput): Canton
  cantonByPostalCodeAndCity(input: CantonByPostalCodeAndCityInput!): String!
  cantons(orderBy: [CantonOrderByInput!], skip: Int, take: Int, where: CantonWhereInput): [Canton!]!
  cantonsCount(orderBy: [CantonOrderByInput!], skip: Int, take: Int, where: CantonWhereInput): Int!
  categories(orderBy: [CategoryOrderByInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  categoriesCount(orderBy: [CategoryOrderByInput!], skip: Int, take: Int, where: CategoryWhereInput): Int!
  category(where: EntityIdInput): Category
  contacts(orderBy: [ContactOrderByInput!], skip: Int, take: Int, where: ContactWhereInput): [Contact!]!
  contactsCount(orderBy: [ContactOrderByInput!], skip: Int, take: Int, where: ContactWhereInput): Int!
  dimensionRanges(orderBy: [DimensionRangeOrderByInput!], skip: Int, take: Int, where: DimensionRangeWhereInput): [DimensionRange!]!
  dimensionRangesCount(orderBy: [DimensionRangeOrderByInput!], skip: Int, take: Int, where: DimensionRangeWhereInput): Int!
  dimensions(orderBy: [DimensionOrderByInput!], skip: Int, take: Int, where: DimensionWhereInput): [Dimension!]!
  dimensionsCount(orderBy: [DimensionOrderByInput!], skip: Int, take: Int, where: DimensionWhereInput): Int!
  ebkphCategories(orderBy: [EbkphCategoryOrderByInput!], skip: Int, take: Int, where: EbkphCategoryWhereInput): [EbkphCategory!]!
  ebkphCategoriesCount(orderBy: [EbkphCategoryOrderByInput!], skip: Int, take: Int, where: EbkphCategoryWhereInput): Int!
  ebkphCategory(where: EntityIdInput): EbkphCategory
  materialsDepot(where: EntityIdInput): MaterialsDepot
  materialsDepotTimeline(where: EntityIdInput): MaterialsDepotTimeline
  materialsDepotTimelines(orderBy: [MaterialsDepotTimelineOrderByInput!], skip: Int, take: Int, where: MaterialsDepotTimelineWhereInput): [MaterialsDepotTimeline!]!
  materialsDepotTimelinesCount(orderBy: [MaterialsDepotTimelineOrderByInput!], skip: Int, take: Int, where: MaterialsDepotTimelineWhereInput): Int!
  materialsDepots(orderBy: [MaterialsDepotOrderByInput!], skip: Int, take: Int, where: MaterialsDepotWhereInput): [MaterialsDepot!]!
  materialsDepotsCount(orderBy: [MaterialsDepotOrderByInput!], skip: Int, take: Int, where: MaterialsDepotWhereInput): Int!
  me: User
  project(where: EntityIdInput): Project
  projects(orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]!
  projectsCount(orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): Int!
  searchRequest(where: EntityIdInput): SearchRequest
  searchRequestInterest(where: EntityIdInput): SearchRequestInterest
  searchRequestInterests(orderBy: [SearchRequestInterestOrderByInput!], skip: Int, take: Int, where: SearchRequestInterestWhereInput): [SearchRequestInterest!]!
  searchRequestInterestsCount(orderBy: [SearchRequestInterestOrderByInput!], skip: Int, take: Int, where: SearchRequestInterestWhereInput): Int!
  searchRequests(orderBy: [SearchRequestOrderByInput!], skip: Int, take: Int, where: SearchRequestWhereInput): [SearchRequest!]!
  searchRequestsCount(orderBy: [SearchRequestOrderByInput!], skip: Int, take: Int, where: SearchRequestWhereInput): Int!
  storageLocation(where: EntityIdInput): StorageLocation
  storageLocations(orderBy: [StorageLocationOrderByInput!], skip: Int, take: Int, where: StorageLocationWhereInput): [StorageLocation!]!
  storageLocationsCount(orderBy: [StorageLocationOrderByInput!], skip: Int, take: Int, where: StorageLocationWhereInput): Int!
  task(where: EntityIdInput): Task
  tasks(orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  tasksCount(orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): Int!
  user(where: EntityIdInput): User
  users(orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  usersCount(orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): Int!
}

type ReferenceId {
  id: String!
}

input RejectSearchRequestInterestInput {
  interestId: String!
  rejectionReason: String
}

enum ReusePotential {
  bad
  fair
  good
  unknown
}

input ReusePotentialEnumInput {
  set: ReusePotential
}

type RowMessage {
  index: Float!
  message: String!
}

type SearchRequest {
  assets: [SearchRequestAssetReference!]
  assignedBuildingComponents: [AssignedBuildingComponent!]!
  assignedBuildingComponentsCount: Int!
  budgetInRappens: Float
  budgetNotes: String
  buildingComponentDescription: String
  buildingComponentName: String
  category: Category
  categoryId: ReferenceId
  comments: String
  createdAt: DateTime!
  deadlineFound: DateTime
  deadlineShipment: DateTime
  dimensionRanges: [DimensionRange!]
  ebkphCategory: EbkphCategory
  ebkphCategoryId: ReferenceId
  fallbackLevel: String
  fallbackLevelCO2PerUnit: Float
  fallbackLevelCO2Total: Float
  fireProtectionNotes: String
  huntingStatusNotes: String
  id: ID!
  interests: [SearchRequestInterest!]!
  project: Project!
  projectId: ReferenceId
  quantity: BigInt
  quantityUnit: QuantityUnit
  reservedBuildingComponentsCount: Int!
  responsibleUser: User!
  responsibleUserId: ReferenceId
  searchConceptNotes: String
  securityNotes: String
  soundProofNotes: String
  state: SearchRequestState!
  updatedAt: DateTime!
}

type SearchRequestAssetReference {
  asset: AppAsset!
  createdAt: DateTime!
  id: ID!
  tags: [String!]
  updatedAt: DateTime!
}

input SearchRequestAssetReferenceCreateNestedManyWithoutSearchRequestInput {
  connect: [ConnectRelationInput!]
  create: [SearchRequestAssetReferenceCreateWithoutSearchRequestInput!]
  disconnect: [EntityIdInput!]
  update: [SearchRequestAssetReferenceUpdateWithWhereUniqueWithoutSearchRequestInput!]
}

input SearchRequestAssetReferenceCreateWithoutSearchRequestInput {
  asset: AppAssetCreateNestedOneWithoutSearchRequestAssetReferenceInput
  tags: [String!]
}

input SearchRequestAssetReferenceOrderByInput {
  asset: AppAssetOrderByInput
  createdAt: SortOrder
  id: SortOrder
  tags: SortOrder
  updatedAt: SortOrder
}

input SearchRequestAssetReferenceUpdateInput {
  asset: AppAssetUpdateNestedOneWithoutSearchRequestAssetReferenceInput
  tags: StringArrayInput
}

input SearchRequestAssetReferenceUpdateWithWhereUniqueWithoutSearchRequestInput {
  data: SearchRequestAssetReferenceUpdateInput
  where: EntityIdInput!
}

input SearchRequestAssetReferenceWhereInput {
  AND: [SearchRequestAssetReferenceWhereInput!]
  NOT: [SearchRequestAssetReferenceWhereInput!]
  OR: [SearchRequestAssetReferenceWhereInput!]
  asset: AppAssetOneRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  tags: StringFilter
  updatedAt: DateTimeFilter
}

input SearchRequestCreateInput {
  assets: SearchRequestAssetReferenceCreateNestedManyWithoutSearchRequestInput
  assignedBuildingComponents: AssignedBuildingComponentCreateNestedManyWithoutSearchRequestInput
  budgetInRappens: Float
  budgetNotes: String
  buildingComponentDescription: String
  buildingComponentName: String
  category: CategoryCreateNestedOneWithoutSearchRequestInput
  comments: String
  deadlineFound: DateTime
  deadlineShipment: DateTime
  dimensionRanges: DimensionRangeCreateNestedManyWithoutSearchRequestInput
  ebkphCategory: EbkphCategoryCreateNestedOneWithoutSearchRequestInput
  fallbackLevel: String
  fallbackLevelCO2PerUnit: Float
  fallbackLevelCO2Total: Float
  fireProtectionNotes: String
  huntingStatusNotes: String
  interests: SearchRequestInterestCreateNestedManyWithoutSearchRequestInput
  project: ProjectCreateNestedOneWithoutSearchRequestInput
  quantity: Float
  quantityUnit: QuantityUnit
  responsibleUser: UserCreateNestedOneWithoutSearchRequestInput
  searchConceptNotes: String
  securityNotes: String
  soundProofNotes: String
  state: SearchRequestState
}

input SearchRequestCreateNestedOneWithoutSearchRequestInterestInput {
  connect: ConnectRelationInput
}

type SearchRequestInterest {
  acceptedAt: DateTime
  buildingComponent: BuildingComponent!
  createdAt: DateTime!
  id: ID!
  notes: String
  rejectedAt: DateTime
  rejectionReason: String
  responsibleUser: User!
  searchRequest: SearchRequest!
  state: SearchRequestInterestState!
  updatedAt: DateTime!
}

input SearchRequestInterestCreateInput {
  acceptedAt: DateTime
  buildingComponent: BuildingComponentCreateNestedOneWithoutSearchRequestInterestInput
  notes: String
  rejectedAt: DateTime
  rejectionReason: String
  responsibleUser: UserCreateNestedOneWithoutSearchRequestInterestInput
  searchRequest: SearchRequestCreateNestedOneWithoutSearchRequestInterestInput
  state: SearchRequestInterestState
}

input SearchRequestInterestCreateNestedManyWithoutBuildingComponentInput {
  connect: [ConnectRelationInput!]
  disconnect: [EntityIdInput!]
}

input SearchRequestInterestCreateNestedManyWithoutSearchRequestInput {
  connect: [ConnectRelationInput!]
  disconnect: [EntityIdInput!]
}

input SearchRequestInterestOrderByInput {
  acceptedAt: SortOrder
  buildingComponent: BuildingComponentOrderByInput
  createdAt: SortOrder
  id: SortOrder
  notes: SortOrder
  rejectedAt: SortOrder
  rejectionReason: SortOrder
  responsibleUser: UserOrderByInput
  searchRequest: SearchRequestOrderByInput
  state: SortOrder
  updatedAt: SortOrder
}

enum SearchRequestInterestState {
  Accepted
  Open
  Rejected
}

input SearchRequestInterestStateEnumInput {
  set: SearchRequestInterestState
}

input SearchRequestInterestUpdateInput {
  acceptedAt: DateInput
  buildingComponent: BuildingComponentUpdateNestedOneWithoutSearchRequestInterestInput
  notes: StringInput
  rejectedAt: DateInput
  rejectionReason: StringInput
  responsibleUser: UserUpdateNestedOneWithoutSearchRequestInterestInput
  searchRequest: SearchRequestUpdateNestedOneWithoutSearchRequestInterestInput
  state: SearchRequestInterestStateEnumInput
}

input SearchRequestInterestWhereInput {
  AND: [SearchRequestInterestWhereInput!]
  NOT: [SearchRequestInterestWhereInput!]
  OR: [SearchRequestInterestWhereInput!]
  acceptedAt: DateTimeFilter
  buildingComponent: BuildingComponentOneRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  notes: StringFilter
  rejectedAt: DateTimeFilter
  rejectionReason: StringFilter
  responsibleUser: UserOneRelationFilter
  searchRequest: SearchRequestOneRelationFilter
  state: StringFilter
  updatedAt: DateTimeFilter
}

input SearchRequestOneRelationFilter {
  AND: SearchRequestWhereInput
  NOT: SearchRequestWhereInput
  OR: SearchRequestWhereInput
  assets: SearchRequestAssetReferenceWhereInput
  assignedBuildingComponents: AssignedBuildingComponentWhereInput
  budgetInRappens: IntFilter
  budgetNotes: StringFilter
  buildingComponentDescription: StringFilter
  buildingComponentName: StringFilter
  category: CategoryOneRelationFilter
  comments: StringFilter
  createdAt: DateTimeFilter
  deadlineFound: DateTimeFilter
  deadlineShipment: DateTimeFilter
  dimensionRanges: DimensionRangeWhereInput
  ebkphCategory: EbkphCategoryOneRelationFilter
  fallbackLevel: StringFilter
  fallbackLevelCO2PerUnit: IntFilter
  fallbackLevelCO2Total: IntFilter
  fireProtectionNotes: StringFilter
  huntingStatusNotes: StringFilter
  id: StringFilter
  interests: SearchRequestInterestWhereInput
  project: ProjectOneRelationFilter
  quantity: IntFilter
  quantityUnit: StringFilter
  responsibleUser: UserOneRelationFilter
  searchConceptNotes: StringFilter
  securityNotes: StringFilter
  soundProofNotes: StringFilter
  state: StringFilter
  updatedAt: DateTimeFilter
}

input SearchRequestOrderByInput {
  assets: SearchRequestAssetReferenceOrderByInput
  assignedBuildingComponents: AssignedBuildingComponentOrderByInput
  budgetInRappens: SortOrder
  budgetNotes: SortOrder
  buildingComponentDescription: SortOrder
  buildingComponentName: SortOrder
  category: CategoryOrderByInput
  comments: SortOrder
  createdAt: SortOrder
  deadlineFound: SortOrder
  deadlineShipment: SortOrder
  dimensionRanges: DimensionRangeOrderByInput
  ebkphCategory: EbkphCategoryOrderByInput
  fallbackLevel: SortOrder
  fallbackLevelCO2PerUnit: SortOrder
  fallbackLevelCO2Total: SortOrder
  fireProtectionNotes: SortOrder
  huntingStatusNotes: SortOrder
  id: SortOrder
  interests: SearchRequestInterestOrderByInput
  project: ProjectOrderByInput
  quantity: SortOrder
  quantityUnit: SortOrder
  responsibleUser: UserOrderByInput
  searchConceptNotes: SortOrder
  securityNotes: SortOrder
  soundProofNotes: SortOrder
  state: SortOrder
  updatedAt: SortOrder
}

enum SearchRequestState {
  active
  closed
  draft
}

input SearchRequestStateEnumInput {
  set: SearchRequestState
}

input SearchRequestUpdateInput {
  assets: SearchRequestAssetReferenceCreateNestedManyWithoutSearchRequestInput
  assignedBuildingComponents: AssignedBuildingComponentCreateNestedManyWithoutSearchRequestInput
  budgetInRappens: NumberInput
  budgetNotes: StringInput
  buildingComponentDescription: StringInput
  buildingComponentName: StringInput
  category: CategoryUpdateNestedOneWithoutSearchRequestInput
  comments: StringInput
  deadlineFound: DateInput
  deadlineShipment: DateInput
  dimensionRanges: DimensionRangeCreateNestedManyWithoutSearchRequestInput
  ebkphCategory: EbkphCategoryUpdateNestedOneWithoutSearchRequestInput
  fallbackLevel: StringInput
  fallbackLevelCO2PerUnit: NumberInput
  fallbackLevelCO2Total: NumberInput
  fireProtectionNotes: StringInput
  huntingStatusNotes: StringInput
  interests: SearchRequestInterestCreateNestedManyWithoutSearchRequestInput
  project: ProjectUpdateNestedOneWithoutSearchRequestInput
  quantity: NumberInput
  quantityUnit: QuantityUnitEnumInput
  responsibleUser: UserUpdateNestedOneWithoutSearchRequestInput
  searchConceptNotes: StringInput
  securityNotes: StringInput
  soundProofNotes: StringInput
  state: SearchRequestStateEnumInput
}

input SearchRequestUpdateNestedOneWithoutSearchRequestInterestInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input SearchRequestWhereInput {
  AND: [SearchRequestWhereInput!]
  NOT: [SearchRequestWhereInput!]
  OR: [SearchRequestWhereInput!]
  assets: SearchRequestAssetReferenceWhereInput
  assignedBuildingComponents: AssignedBuildingComponentWhereInput
  budgetInRappens: IntFilter
  budgetNotes: StringFilter
  buildingComponentDescription: StringFilter
  buildingComponentName: StringFilter
  category: CategoryOneRelationFilter
  comments: StringFilter
  createdAt: DateTimeFilter
  deadlineFound: DateTimeFilter
  deadlineShipment: DateTimeFilter
  dimensionRanges: DimensionRangeWhereInput
  ebkphCategory: EbkphCategoryOneRelationFilter
  fallbackLevel: StringFilter
  fallbackLevelCO2PerUnit: IntFilter
  fallbackLevelCO2Total: IntFilter
  fireProtectionNotes: StringFilter
  huntingStatusNotes: StringFilter
  id: StringFilter
  interests: SearchRequestInterestWhereInput
  project: ProjectOneRelationFilter
  quantity: IntFilter
  quantityUnit: StringFilter
  responsibleUser: UserOneRelationFilter
  searchConceptNotes: StringFilter
  securityNotes: StringFilter
  soundProofNotes: StringFilter
  state: StringFilter
  updatedAt: DateTimeFilter
}

enum SortOrder {
  asc
  desc
}

enum SringQueryMode {
  default
  insensitive
}

type StorageLocation {
  assets: [StorageLocationAssetReference!]
  buildingComponents: [BuildingComponent!]!
  canton: String
  city: String
  contacts: [Contact!]
  country: String
  createdAt: DateTime!
  googleMapsLink: String
  id: ID!
  mainImage: AppAsset
  mainImageId: AppAsset
  name: String!
  notes: String
  postalCode: String
  street: String
  updatedAt: DateTime!
}

type StorageLocationAssetReference {
  asset: AppAsset!
  createdAt: DateTime!
  id: ID!
  tags: [String!]
  updatedAt: DateTime!
}

input StorageLocationAssetReferenceCreateNestedManyWithoutStorageLocationInput {
  connect: [ConnectRelationInput!]
  create: [StorageLocationAssetReferenceCreateWithoutStorageLocationInput!]
  disconnect: [EntityIdInput!]
  update: [StorageLocationAssetReferenceUpdateWithWhereUniqueWithoutStorageLocationInput!]
}

input StorageLocationAssetReferenceCreateWithoutStorageLocationInput {
  asset: AppAssetCreateNestedOneWithoutStorageLocationAssetReferenceInput
  tags: [String!]
}

input StorageLocationAssetReferenceOrderByInput {
  asset: AppAssetOrderByInput
  createdAt: SortOrder
  id: SortOrder
  tags: SortOrder
  updatedAt: SortOrder
}

input StorageLocationAssetReferenceUpdateInput {
  asset: AppAssetUpdateNestedOneWithoutStorageLocationAssetReferenceInput
  tags: StringArrayInput
}

input StorageLocationAssetReferenceUpdateWithWhereUniqueWithoutStorageLocationInput {
  data: StorageLocationAssetReferenceUpdateInput
  where: EntityIdInput!
}

input StorageLocationAssetReferenceWhereInput {
  AND: [StorageLocationAssetReferenceWhereInput!]
  NOT: [StorageLocationAssetReferenceWhereInput!]
  OR: [StorageLocationAssetReferenceWhereInput!]
  asset: AppAssetOneRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  tags: StringFilter
  updatedAt: DateTimeFilter
}

input StorageLocationCreateInput {
  assets: StorageLocationAssetReferenceCreateNestedManyWithoutStorageLocationInput
  buildingComponents: BuildingComponentCreateNestedManyWithoutStorageLocationInput
  city: String
  contacts: ContactCreateNestedManyWithoutStorageLocationInput
  country: String = "CH"
  googleMapsLink: String
  mainImage: AppAssetCreateNestedOneWithoutStorageLocationInput
  name: String
  notes: String
  postalCode: String
  street: String
}

input StorageLocationCreateNestedOneWithoutBuildingComponentInput {
  connect: ConnectRelationInput
}

input StorageLocationOneRelationFilter {
  AND: StorageLocationWhereInput
  NOT: StorageLocationWhereInput
  OR: StorageLocationWhereInput
  assets: StorageLocationAssetReferenceWhereInput
  buildingComponents: BuildingComponentWhereInput
  canton: StringFilter
  city: StringFilter
  contacts: ContactWhereInput
  country: StringFilter
  createdAt: DateTimeFilter
  googleMapsLink: StringFilter
  id: StringFilter
  mainImage: AppAssetOneRelationFilter
  name: StringFilter
  notes: StringFilter
  postalCode: StringFilter
  street: StringFilter
  updatedAt: DateTimeFilter
}

input StorageLocationOrderByInput {
  assets: StorageLocationAssetReferenceOrderByInput
  buildingComponents: BuildingComponentOrderByInput
  canton: SortOrder
  city: SortOrder
  contacts: ContactOrderByInput
  country: SortOrder
  createdAt: SortOrder
  googleMapsLink: SortOrder
  id: SortOrder
  mainImage: AppAssetOrderByInput
  name: SortOrder
  notes: SortOrder
  postalCode: SortOrder
  street: SortOrder
  updatedAt: SortOrder
}

input StorageLocationUpdateInput {
  assets: StorageLocationAssetReferenceCreateNestedManyWithoutStorageLocationInput
  buildingComponents: BuildingComponentCreateNestedManyWithoutStorageLocationInput
  city: StringInput
  contacts: ContactCreateNestedManyWithoutStorageLocationInput
  country: StringInput
  googleMapsLink: StringInput
  mainImage: AppAssetUpdateNestedOneWithoutStorageLocationInput
  name: StringInput
  notes: StringInput
  postalCode: StringInput
  street: StringInput
}

input StorageLocationUpdateNestedOneWithoutBuildingComponentInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input StorageLocationWhereInput {
  AND: [StorageLocationWhereInput!]
  NOT: [StorageLocationWhereInput!]
  OR: [StorageLocationWhereInput!]
  assets: StorageLocationAssetReferenceWhereInput
  buildingComponents: BuildingComponentWhereInput
  canton: StringFilter
  city: StringFilter
  contacts: ContactWhereInput
  country: StringFilter
  createdAt: DateTimeFilter
  googleMapsLink: StringFilter
  id: StringFilter
  mainImage: AppAssetOneRelationFilter
  name: StringFilter
  notes: StringFilter
  postalCode: StringFilter
  street: StringFilter
  updatedAt: DateTimeFilter
}

input StringArrayInput {
  set: [String!]
}

input StringFilter {
  contains: String
  equals: String
  fulltext: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: SringQueryMode
  nin: [String!]
}

input StringInput {
  set: String
}

type Task {
  closedAt: DateTime
  createdAt: DateTime!
  dueDate: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input TaskCreateInput {
  closedAt: DateTime
  dueDate: DateTime
  name: String
}

input TaskCreateNestedManyWithoutMaterialsDepotInput {
  connect: [ConnectRelationInput!]
  create: [TaskCreateWithoutMaterialsDepotInput!]
  disconnect: [EntityIdInput!]
  update: [TaskUpdateWithWhereUniqueWithoutMaterialsDepotInput!]
}

input TaskCreateWithoutMaterialsDepotInput {
  closedAt: DateTime
  dueDate: DateTime
  name: String
}

input TaskOrderByInput {
  closedAt: SortOrder
  createdAt: SortOrder
  dueDate: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TaskUpdateInput {
  closedAt: DateInput
  dueDate: DateInput
  name: StringInput
}

input TaskUpdateWithWhereUniqueWithoutMaterialsDepotInput {
  data: TaskUpdateInput
  where: EntityIdInput!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  closedAt: DateTimeFilter
  createdAt: DateTimeFilter
  dueDate: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input TriggerOtpLoginInput {
  email: String!
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  notes: String
  updatedAt: DateTime!
}

input UserCreateNestedOneWithoutMaterialsDepotInput {
  connect: ConnectRelationInput
}

input UserCreateNestedOneWithoutProjectInput {
  connect: ConnectRelationInput
}

input UserCreateNestedOneWithoutSearchRequestInput {
  connect: ConnectRelationInput
}

input UserCreateNestedOneWithoutSearchRequestInterestInput {
  connect: ConnectRelationInput
}

input UserOneRelationFilter {
  AND: UserWhereInput
  NOT: UserWhereInput
  OR: UserWhereInput
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  notes: StringFilter
  updatedAt: DateTimeFilter
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  notes: SortOrder
  updatedAt: SortOrder
}

input UserUpdateNestedOneWithoutMaterialsDepotInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input UserUpdateNestedOneWithoutProjectInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input UserUpdateNestedOneWithoutSearchRequestInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input UserUpdateNestedOneWithoutSearchRequestInterestInput {
  connect: ConnectRelationInput
  disconnect: Boolean
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  notes: StringFilter
  updatedAt: DateTimeFilter
}