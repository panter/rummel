import {
  AppAsset,
  AuditableEntity,
  CrudField,
  TenantAware,
} from '@panter/nestjs-utils';
import {
  BeforeCreate,
  BeforeUpdate,
  Cascade,
  Collection,
  Entity,
  Enum,
  Formula,
  ManyToMany,
  ManyToOne,
  OneToMany,
  OneToOne,
  Property,
} from '@mikro-orm/core';
import {
  BuildingComponentPhase,
  BuildingComponentState,
  Condition,
  HarmfulSubstances,
  QuantityUnit,
  ReusePotential,
} from '../building-component.enum';
import { Field, HideField, ObjectType } from '@nestjs/graphql';

import { AssignedBuildingComponent } from '../../search-request-interest/assigned-building-component.entity';
import { BuildingComponentAssetReference } from './building-component-asset-reference.entity';
import { Category } from '../../category/category.entity';
import { Dimension } from '../../dimension/dimension.entity';
import { EbkphCategory } from '../../ebkph-category/ebkph-category.entity';
import { GraphQLBigInt } from 'graphql-scalars';
import { MaterialsDepot } from '../../materials-depot/entities/materials-depot.entity';
import { SearchRequestInterest } from '../../search-request-interest/search-request-interest.entity';
import { StorageLocation } from '../../storage-location/storage-location.entity';
import { USER_TENANT_ID } from '../../user-identity';
import { Contact } from '../../contact/contact.entity';

// const mandatoryContactTypes = [
//   // 'BautrÃ¤gerschaft',
//   'Wiedereingebaut durch',
//   'Ausbau durch',
//   'Hersteller:in',
// ];

@ObjectType()
@Entity({ tableName: 'building_component' })
export class BuildingComponent extends AuditableEntity {
  @CrudField({ hideCreate: true, hideUpdate: true })
  @Field(() => GraphQLBigInt)
  //this property is generated by db trigger (see. Migration20230731115801.ts)
  @Property({
    nullable: true, //to ignore runtime ORM CHECK
    ignoreSchemaChanges: ['type', 'extra'],
  })
  componentSn!: number;

  @CrudField({ hideCreate: true, hideUpdate: true })
  @Field({ nullable: true })
  @Formula(
    (alias) =>
      `CONCAT((select md.short_name from materials_depot md where md.id = ${alias}.materials_depot_id), ${alias}.component_sn)`,
  )
  componentId!: string;

  @HideField()
  @Property({ nullable: true, unique: true })
  externalId?: string;

  @Field(() => BuildingComponentState)
  @Enum({
    items: () => BuildingComponentState,
    default: BuildingComponentState.draft,
  })
  state: BuildingComponentState = BuildingComponentState.draft;

  @Field({ nullable: true })
  @Property({ nullable: true })
  name?: string;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  description?: string;

  @Field(() => BuildingComponentPhase)
  @Enum({
    items: () => BuildingComponentPhase,
    default: BuildingComponentPhase.inventory,
  })
  phase: BuildingComponentPhase = BuildingComponentPhase.inventory;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'numeric', precision: 10, scale: 3 })
  quantity?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  quantityExact?: boolean;

  @Field(() => QuantityUnit, { nullable: true })
  @Enum({ items: () => QuantityUnit, nullable: true })
  quantityUnit?: QuantityUnit;

  @Field({ nullable: true })
  @Property({ nullable: true })
  quantitySpare?: number;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  quantityNotes?: string;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  sparePartsNotes?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  constructionYear?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  constructionYearExact?: boolean;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  constructionYearNotes?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  co2Savings?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  co2SavingsExact?: boolean;

  @Field(() => Condition, { nullable: true })
  @Enum({ items: () => Condition, nullable: true })
  condition?: Condition;

  @Field(() => HarmfulSubstances, { nullable: true })
  @Enum({ items: () => HarmfulSubstances, nullable: true })
  harmfulSubstances?: HarmfulSubstances;

  @Field(() => ReusePotential, { nullable: true })
  @Enum({ items: () => ReusePotential, nullable: true })
  reusePotential?: ReusePotential;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  reusePotentialNotes?: string;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  reusePotentialConclusion?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  locationInBuilding?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  locationInBuildingDetail?: string;

  @Field()
  @Property()
  showInMatching: boolean = false;

  // CO2 calculation part
  @Field({ nullable: true })
  @Property({ nullable: true })
  reuseValuePerUnit?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  reuseValueTotal?: number;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  reuseValueDescription?: string;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  ru1Explanation?: string;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  ru2Explanation?: string;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  ru3Explanation?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  ru1PerUnit?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  ru2PerUnit?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  ru3PerUnit?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  ruPerUnitSum?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  fallbackLevel?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  fallbackLevelCO2PerUnit?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  fallbackLevelCO2Total?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  co2SavingsPerUnit?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  ru1Total?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  ru2Total?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  ru3Total?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  ruTotalSum?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  co2SavingsTotal?: number;

  @Field(() => QuantityUnit, { nullable: true })
  @Enum({ items: () => QuantityUnit, nullable: true })
  co2Unit?: QuantityUnit;

  @Field({ nullable: true })
  @Property({ nullable: true })
  co2QuantityUsed?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  @Field({ nullable: true })
  @Property({ nullable: true })
  transportDistanceInKm?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  transportVehicleName?: string;

  // end of CO2 calculation part

  @Field(() => MaterialsDepot)
  @ManyToOne(() => MaterialsDepot)
  materialsDepot!: MaterialsDepot;

  @Field(() => StorageLocation, { nullable: true })
  @ManyToOne(() => StorageLocation, { nullable: true })
  storageLocation?: StorageLocation;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  storageLocationNotes?: string;

  @Field(() => EbkphCategory, { nullable: true })
  @ManyToOne(() => EbkphCategory, { nullable: true })
  ebkphCategory?: EbkphCategory;

  @Field(() => Category, { nullable: true })
  @ManyToOne(() => Category, { nullable: true })
  category?: Category;

  @CrudField({ relation: { showCreate: true, showUpdate: true } })
  @Field(() => [Dimension], { nullable: true })
  @ManyToMany({ entity: () => Dimension, owner: true, eager: true })
  dimensions = new Collection<Dimension>(this);

  @Field({ nullable: true })
  @Property({ nullable: true })
  dimensionsNotes?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  demolitionPhase?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  potentialInterests?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  warrantyDetails?: string;

  @CrudField({ relation: { showCreate: true, showUpdate: true } })
  @Field(() => [BuildingComponentAssetReference], { nullable: true })
  @OneToMany({
    entity: () => BuildingComponentAssetReference,
    mappedBy: (l) => l.buildingComponent,
    cascade: [Cascade.ALL],
    orphanRemoval: true,
  })
  assets = new Collection<BuildingComponentAssetReference>(this);

  @Field(() => AppAsset, { nullable: true })
  @ManyToOne({
    entity: () => AppAsset,
    nullable: true,
  })
  mainImage?: AppAsset;

  @Field(() => [SearchRequestInterest])
  @OneToMany({
    entity: () => SearchRequestInterest,
    mappedBy: (interest) => interest.buildingComponent,
  })
  searchRequestInterests = new Collection<SearchRequestInterest>(this);

  @Field(() => AssignedBuildingComponent, { nullable: true })
  @OneToOne({
    entity: () => AssignedBuildingComponent,
    mappedBy: (assignedBuildingComponent) =>
      assignedBuildingComponent.buildingComponent,
    eager: true,
  })
  assignedTo?: AssignedBuildingComponent;

  @CrudField({ relation: { showCreate: true, showUpdate: true } })
  @Field(() => [Contact], { nullable: true })
  @ManyToMany({ entity: () => Contact, owner: true })
  contacts = new Collection<Contact>(this);

  constructor(props?: { materialsDepot: MaterialsDepot }) {
    super();
    if (!props) {
      return;
    }

    const { materialsDepot } = props;
    this.materialsDepot = materialsDepot;

    // mandatoryContactTypes?.forEach((name) =>
    //   this.contacts.add(new Contact({ type: name })),
    // );
  }

  addImage(asset: AppAsset) {
    this.assets.add(new BuildingComponentAssetReference(this, asset));
  }

  removeImage(assetRef: BuildingComponentAssetReference) {
    this.assets.remove(assetRef);
  }

  getTenantId(): string {
    return USER_TENANT_ID;
  }

  hasSameTenant(other: TenantAware): boolean {
    return this.getTenantId() === other.getTenantId();
  }

  toString(): string {
    // todo please make me better
    return `${this.componentId} ${this.name} ${
      this.dimensions.isInitialized()
        ? this.dimensions.getItems().join(', ')
        : ''
    } ${this.quantity || ''} ${this.quantityUnit || ''}`.replace(/\s\s+/g, ' ');
  }

  @BeforeCreate()
  @BeforeUpdate()
  async beforeUpdate() {
    // if (this.contacts.isInitialized(true)) {
    //   const missingContacts = mandatoryContactTypes?.filter(
    //     (name) =>
    //       !this.contacts.getItems().find((contact) => contact.type === name),
    //   );
    //   if (missingContacts.length) {
    //     throw new MissingMandatoryContactException(missingContacts);
    //   }
    // }
    this.reuseValueTotal =
      (this.reuseValuePerUnit || 0) * (this.co2QuantityUsed || 0);

    this.fallbackLevel = this.assignedTo?.searchRequest.fallbackLevel;
    this.ruPerUnitSum =
      (this.ru1PerUnit || 0) + (this.ru2PerUnit || 0) + (this.ru3PerUnit || 0);
    this.fallbackLevelCO2PerUnit =
      this.assignedTo?.searchRequest.fallbackLevelCO2PerUnit || 0;
    this.co2SavingsPerUnit = this.ruPerUnitSum - this.fallbackLevelCO2PerUnit;
    this.ru1Total =
      this.ru1PerUnit && this.co2SavingsPerUnit
        ? this.ru1PerUnit * (this.co2QuantityUsed || 0)
        : 0;
    this.ru2Total =
      this.ru2PerUnit && this.co2SavingsPerUnit
        ? this.ru2PerUnit * (this.co2QuantityUsed || 0)
        : 0;
    this.ru3Total =
      this.ru3PerUnit && this.co2SavingsPerUnit
        ? this.ru3PerUnit * (this.co2QuantityUsed || 0)
        : 0;
    this.ruTotalSum = this.ru1Total + this.ru2Total + this.ru3Total;
    this.fallbackLevelCO2Total =
      this.fallbackLevelCO2PerUnit * (this.co2QuantityUsed || 0);
    this.co2SavingsTotal = this.ruTotalSum - this.fallbackLevelCO2Total;
  }
}
