import {
  Cascade,
  Collection,
  Entity,
  EntityRepositoryType,
  Enum,
  Formula,
  Index,
  ManyToMany,
  ManyToOne,
  OneToMany,
  Property,
} from '@mikro-orm/core';
import { Field, HideField, ObjectType } from '@nestjs/graphql';
import {
  AppAsset,
  AuditableEntity,
  CrudField,
  TenantAware,
} from '@panter/nestjs-utils';
import { Max, Min } from 'class-validator';
import { User, USER_TENANT_ID } from '../../user-identity';

import { FullTextType } from '@mikro-orm/postgresql';
import { BuildingComponent } from '../../building-component/entities/building-component.entity';
import { Contact } from '../../contact/contact.entity';
import { MaterialsDepotRepository } from '../materials-depot.repository';
import { MaterialsDepotAssetReference } from './materials-depot-asset-reference.entity';
import { Task } from '../../task/task.entity';
import { MaterialsDepotTimeline } from '../../materials-depot-timeline/materials-depot-timeline.entity';
import { MaterialsDepotState } from '../materials-depot.enum';

export const updateMaterialDepotFullTextSearch = ({
  shortName,
  name,
  postalCode,
  city,
  street,
  historyNotes,
  phase,
  notes,
  complex,
  typology,
  constructionYear,
  interventionDepth,
  responsableUser,
}: MaterialsDepot) =>
  [
    shortName,
    name,
    street,
    postalCode,
    city,
    shortName,
    phase,
    typology,
    complex,
    constructionYear,
    interventionDepth,
    responsableUser?.email,
    // TODO: populate contacts
    // ...contacts
    //   .getItems()
    //   .map((c) => c.firstLine)
    //   .join(' '),
    // ...contacts
    //   .getItems()
    //   .map((c) => c.lastName)
    //   .join(' '),
    notes,
    historyNotes,
  ]
    .filter(Boolean)
    .join(' ')
    .replace(/\s+/g, ' ')
    .trim();

@ObjectType()
@Entity({
  tableName: 'materials_depot',
  repository: () => MaterialsDepotRepository,
})
export class MaterialsDepot extends AuditableEntity {
  @HideField()
  [EntityRepositoryType]?: MaterialsDepotRepository;

  @HideField()
  @Property({ nullable: true, unique: true })
  externalId?: string;

  @HideField()
  //this property is generated by db trigger (see. Migration20230731115801.ts)
  @Property({
    type: 'bigint',
    defaultRaw: '100',
    ignoreSchemaChanges: ['type', 'extra'],
  })
  nextComponentSn!: number;

  @Field(() => MaterialsDepotState)
  @Enum({
    items: () => MaterialsDepotState,
    default: MaterialsDepotState.draft,
  })
  state: MaterialsDepotState = MaterialsDepotState.draft;

  @Field()
  @Property({ unique: true })
  shortName!: string;

  @Field()
  @Property()
  name!: string;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  googleMapsLink?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  complex?: string;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  notes?: string;

  @Field({ nullable: true })
  @Property({ nullable: true, type: 'text' })
  historyNotes?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  typology?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  interventionDepth?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  phase?: string;

  @Min(1)
  @Max(5)
  @Field({ nullable: true })
  @Property({ nullable: true })
  reUseRating?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  constructionYear?: number;

  @Field({ nullable: true })
  @Property({ nullable: true })
  constructionYearExact?: boolean;

  @Field({ defaultValue: 'CH', nullable: true })
  @Property({ default: 'CH', type: 'char(2)' })
  country: string = 'CH';

  @Field({ nullable: true })
  @Property({ nullable: true })
  city?: string;

  @CrudField({ hideCreate: true, hideUpdate: true })
  @Field({ nullable: true })
  @Formula(
    (alias) =>
      `(SELECT CONCAT(pc.canton, ', ', pc.description) from postal_code pc where pc.postal_code = ${alias}.postal_code LIMIT 1)`,
  )
  canton?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  postalCode?: string;

  @Field({ nullable: true })
  @Property({ nullable: true })
  street?: string;

  @CrudField({ relation: { showCreate: true, showUpdate: true } })
  @Field(() => [MaterialsDepotAssetReference], { nullable: true })
  @OneToMany({
    entity: () => MaterialsDepotAssetReference,
    mappedBy: (l) => l.materialsDepot,
    cascade: [Cascade.ALL],
    orphanRemoval: true,
  })
  assets = new Collection<MaterialsDepotAssetReference>(this);

  @Field(() => AppAsset, { nullable: true })
  @ManyToOne({
    entity: () => AppAsset,
    nullable: true,
  })
  mainImage?: AppAsset;

  @CrudField({ relation: { showCreate: true, showUpdate: true } })
  @Field(() => [BuildingComponent])
  @OneToMany(() => BuildingComponent, (p) => p.materialsDepot)
  buildingComponents = new Collection<BuildingComponent>(this);

  @Field(() => User)
  @ManyToOne(() => User, {
    onDelete: 'set null',
  })
  responsableUser!: User;

  @CrudField({ relation: { showCreate: true, showUpdate: true } })
  @Field(() => [Contact], { nullable: true })
  @ManyToMany({ entity: () => Contact, owner: true })
  contacts = new Collection<Contact>(this);

  @CrudField({ relation: { showCreate: true, showUpdate: true } })
  @Field(() => [Task], { nullable: true })
  @ManyToMany({ entity: () => Task, owner: true })
  tasks = new Collection<Task>(this);

  @CrudField({ relation: { showCreate: true, showUpdate: true } })
  @Field(() => [MaterialsDepotTimeline])
  @OneToMany({
    entity: () => MaterialsDepotTimeline,
    mappedBy: (timeline) => timeline.materialsDepot,
    orphanRemoval: true,
  })
  timelines = new Collection<MaterialsDepotTimeline>(this);

  @CrudField({ hideCreate: true, hideUpdate: true })
  @Field({ nullable: true })
  @Index({ type: 'fulltext' })
  @Property({
    type: FullTextType,
    nullable: true,
    onCreate: updateMaterialDepotFullTextSearch,
    onUpdate: updateMaterialDepotFullTextSearch,
  })
  materialDepotFulltextSearch?: string;

  constructor(props?: {
    shortName: string;
    name: string;
    responsableUser: User;
  }) {
    super();
    if (!props) {
      return;
    }

    const { shortName, name, responsableUser } = props;
    this.shortName = shortName;
    this.name = name;
    this.responsableUser = responsableUser;
  }

  addImage(asset: AppAsset) {
    this.assets.add(new MaterialsDepotAssetReference(this, asset));
  }

  removeImage(assetRef: MaterialsDepotAssetReference) {
    this.assets.remove(assetRef);
  }

  getTenantId(): string {
    return USER_TENANT_ID;
  }

  hasSameTenant(other: TenantAware): boolean {
    return this.getTenantId() === other.getTenantId();
  }
}
