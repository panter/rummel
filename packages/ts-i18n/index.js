#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const flattenjs = require('flattenjs');
const getNamespaces = require('./getNamespaces.js');

function mergeResources(namespaces) {
  return namespaces.reduce((prev, cur) => {
    prev[cur.name] = cur.resources;
    return prev;
  }, {});
}

const cliArgs = process.argv.slice(2);

let inputPath = process.cwd();
let outputPath = inputPath;
if (cliArgs.length > 0 && cliArgs[1].indexOf('-') !== 0) {
  inputPath = cliArgs[1];
  outputPath = inputPath;
}

const inputArgIndex = cliArgs.indexOf('-i');
const outputArgIndex = cliArgs.indexOf('-o');
if (inputArgIndex > -1 && cliArgs[inputArgIndex + 1])
  inputPath = cliArgs[inputArgIndex + 1];
if (outputArgIndex > -1 && cliArgs[outputArgIndex + 1])
  outputPath = cliArgs[outputArgIndex + 1];

inputPath = path.resolve(inputPath);
outputPath = path.resolve(outputPath);

const namespaces = getNamespaces(inputPath);

let outputFile = outputPath;
if (!outputFile.endsWith('.d.ts')) {
  outputFile = path.join(outputFile, 'resources.d.ts');
}

const resources = mergeResources(namespaces);
let interfaceFileContent = `
/* tslint:disable prettier/prettier */
/* eslint-disable prettier/prettier */
/* prettier-ignore */
// automatically generated by ts-i18n. Do not modify!
\n
`;
interfaceFileContent += 'export type ResourcesWithoutNamespace = ';
interfaceFileContent += Object.keys(flattenjs.flatten(resources))
  .map((key) => {
    let replacedKey = `"${key}"`;
    namespaces.forEach((namespace) => {
      replacedKey = replacedKey.replace(`${namespace.name}.`, '');
    });
    return replacedKey;
  })
  .join(' |\n');

interfaceFileContent += '\n\n export type ResourcesWithNamespace = ';
interfaceFileContent += Object.keys(flattenjs.flatten(resources))
  .map((key) => {
    const ns = key.split('.')[0];
    return `"${ns}:${key.split('.').slice(1).join('.')}"`
  })
  .join(' |\n');

interfaceFileContent += '\n\n export type Resources = ResourcesWithNamespace | ResourcesWithoutNamespace;';

fs.writeFileSync(outputFile, interfaceFileContent, 'utf-8');
