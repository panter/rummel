// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Graphql types should generate graphql schema with all fields 1`] = `
"type Dummy {
  idProp: ID!
  intProp: Int!
  floatProps: Float!
  enumProp: DummyEnum!
  stringProp: String!
  optionalStringProp: String
  boolProp: Boolean!
  dateProp: DateTime!
  oneToManyProp(where: Dummy2WhereInput, orderBy: [Dummy2OrderByInput!], skip: Int, take: Int): [Dummy2!]!
  manyToManyProp(where: Dummy2WhereInput, orderBy: [Dummy2OrderByInput!], skip: Int, take: Int): [Dummy2!]!
}

enum DummyEnum {
  A
  B
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input Dummy2WhereInput {
  AND: [Dummy2WhereInput!]
  OR: [Dummy2WhereInput!]
  NOT: [Dummy2WhereInput!]
  idProp: StringFilter
  dummyProp: DummyOneRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  nin: [String!]
  contains: String
  gt: String
  gte: String
  lt: String
  lte: String
  fulltext: String
  ne: String
  mode: SringQueryMode
}

enum SringQueryMode {
  default
  insensitive
}

input DummyOneRelationFilter {
  AND: DummyWhereInput
  OR: DummyWhereInput
  NOT: DummyWhereInput
  idProp: StringFilter
  intProp: IntFilter
  floatProps: IntFilter
  enumProp: DummyEnumEnumFilter
  stringProp: StringFilter
  optionalStringProp: StringFilter
  boolProp: BoolFilter
  dateProp: DateTimeFilter
}

input DummyWhereInput {
  AND: [DummyWhereInput!]
  OR: [DummyWhereInput!]
  NOT: [DummyWhereInput!]
  idProp: StringFilter
  intProp: IntFilter
  floatProps: IntFilter
  enumProp: DummyEnumEnumFilter
  stringProp: StringFilter
  optionalStringProp: StringFilter
  boolProp: BoolFilter
  dateProp: DateTimeFilter
  oneToManyProp: Dummy2WhereInput
  manyToManyProp: Dummy2WhereInput
}

input IntFilter {
  equals: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
}

input DummyEnumEnumFilter {
  equals: DummyEnum
  in: [DummyEnum!]
  nin: [DummyEnum!]
  contains: DummyEnum
  gt: DummyEnum
  gte: DummyEnum
  lt: DummyEnum
  lte: DummyEnum
  fulltext: DummyEnum
  ne: DummyEnum
  mode: SringQueryMode
}

input BoolFilter {
  equals: Boolean
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  ne: DateTime
}

input Dummy2OrderByInput {
  idProp: SortOrder
  dummyProp: DummyOrderByInput
}

enum SortOrder {
  asc
  desc
}

input DummyOrderByInput {
  idProp: SortOrder
  intProp: SortOrder
  floatProps: SortOrder
  enumProp: SortOrder
  stringProp: SortOrder
  optionalStringProp: SortOrder
  boolProp: SortOrder
  dateProp: SortOrder
  oneToManyProp: Dummy2OrderByInput
  manyToManyProp: Dummy2OrderByInput
}

type Dummy2 {
  idProp: ID!
  dummyProp: Dummy!
}

type Query {
  dummy(where: EntityIdInput): Dummy
  dummies(where: DummyWhereInput, orderBy: [DummyOrderByInput!], skip: Int, take: Int): [Dummy!]!
  dummiesCount(where: DummyWhereInput, orderBy: [DummyOrderByInput!], skip: Int, take: Int): Int!
}

input EntityIdInput {
  id: String
}

type Mutation {
  createOneDummy(data: DummyCreateInput): Dummy!
  updateOneDummy(data: DummyUpdateInput, where: EntityIdInput!): Dummy!
  deleteOneDummy(where: EntityIdInput!): Dummy!
}

input DummyCreateInput {
  intProp: Float
  floatProps: Float
  enumProp: DummyEnum
  stringProp: String
  optionalStringProp: String
  boolProp: Boolean
  dateProp: DateTime
  oneToManyProp: Dummy2CrManyWithoutDummyCreateInput
  manyToManyProp: Dummy2CoCrManyWithoutDummyCreateInput
}

input Dummy2CrManyWithoutDummyCreateInput {
  create: [Dummy2CreateWithoutDummyInput!]
}

input Dummy2CreateWithoutDummyInput

input Dummy2CoCrManyWithoutDummyCreateInput {
  connect: [ConnectRelationInput!]
  create: [Dummy2CreateWithoutDummyInput!]
}

input ConnectRelationInput {
  id: String
}

input DummyUpdateInput {
  intProp: NumberInput
  floatProps: NumberInput
  enumProp: DummyEnumEnumInput
  stringProp: StringInput
  optionalStringProp: StringInput
  boolProp: BooleanInput
  dateProp: DateInput
  oneToManyProp: Dummy2CrUpManyWithoutDummyUpdateInput
  manyToManyProp: Dummy2CoCrUpManyWithoutDummyUpdateInput
}

input NumberInput {
  set: Float
}

input DummyEnumEnumInput {
  set: DummyEnum
}

input StringInput {
  set: String
}

input BooleanInput {
  set: Boolean
}

input DateInput {
  set: DateTime
}

input Dummy2CrUpManyWithoutDummyUpdateInput {
  create: [Dummy2CreateWithoutDummyInput!]
  update: [Dummy2UpdateWithWhereUniqueWithoutDummyInput!]
}

input Dummy2UpdateWithWhereUniqueWithoutDummyInput {
  where: EntityIdInput!
  data: Dummy2UpdateInput
}

input Dummy2UpdateInput

input Dummy2CoCrUpManyWithoutDummyUpdateInput {
  connect: [ConnectRelationInput!]
  create: [Dummy2CreateWithoutDummyInput!]
  update: [Dummy2UpdateWithWhereUniqueWithoutDummyInput!]
}"
`;
