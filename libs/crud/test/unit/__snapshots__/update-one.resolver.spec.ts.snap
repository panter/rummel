// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UpdateOneResolver should generate graphql schema for UpdateOneCompanyResolver 1`] = `
"type User {
  id: String!
  name: String!
}

type Company {
  id: String!
  name: String!
  description: String
  founder: User!
  ceo: User
  cto: User
}

type Mutation {
  updateOneCompany(data: CompanyUpdateInput, where: EntityIdInput!): Company!
}

input CompanyUpdateInput {
  description: StringInput
  ceo: UserCoOneWithoutCompanyUpdateInput
  cto: UserCrUpOneWithoutCompanyUpdateInput
}

input StringInput {
  set: String
}

input UserCoOneWithoutCompanyUpdateInput {
  connect: ConnectRelationInput
}

input ConnectRelationInput {
  id: String
}

input UserCrUpOneWithoutCompanyUpdateInput {
  create: UserCreateWithoutCompanyInput
  update: UserUpdateWithoutCompanyInput
}

input UserCreateWithoutCompanyInput {
  name: String
}

input UserUpdateWithoutCompanyInput {
  name: StringInput
}

input EntityIdInput {
  id: String
}"
`;

exports[`UpdateOneResolver should generate graphql schema for UpdateOneGroupResolver 1`] = `
"type User {
  id: String!
  name: String!
}

type Group {
  id: String!
  name: String!
  description: String!
  founders: [User!]!
  coordinator: [User!]
  finance: [User!]
}

type Mutation {
  updateOneGroup(data: GroupUpdateInput, where: EntityIdInput!): Group!
}

input GroupUpdateInput {
  description: StringInput
  coordinator: UserCoDiManyWithoutGroupUpdateInput
  finance: UserCrudManyWithoutGroupUpdateInput
}

input StringInput {
  set: String
}

input UserCoDiManyWithoutGroupUpdateInput {
  connect: [ConnectRelationInput!]
  disconnect: [EntityIdInput!]
}

input ConnectRelationInput {
  id: String
}

input EntityIdInput {
  id: String
}

input UserCrudManyWithoutGroupUpdateInput {
  connect: [ConnectRelationInput!]
  create: [UserCreateWithoutGroupInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupInput!]
  disconnect: [EntityIdInput!]
}

input UserCreateWithoutGroupInput {
  name: String
}

input UserUpdateWithWhereUniqueWithoutGroupInput {
  where: EntityIdInput!
  data: UserUpdateInput
}

input UserUpdateInput {
  name: StringInput
}"
`;

exports[`UpdateOneResolver should generate graphql schema for UpdateOneUserResolver 1`] = `
"type User {
  id: String!
  name: String!
}

type Mutation {
  updateOneUser(data: UserUpdateInput, where: EntityIdInput!): User!
}

input UserUpdateInput {
  name: StringInput
}

input StringInput {
  set: String
}

input EntityIdInput {
  id: String
}"
`;
